#+TITLE: Appendix-B-Handlng-the-Kill-Ring
* Appendix B Handling the Kill Ring
   :PROPERTIES:
   :CUSTOM_ID: appendix-b-handling-the-kill-ring
   :CLASS: appendix
   :END:

 The kill ring is a list that is transformed into a ring by the workings of the =current-kill= function. The =yank= and =yank-pop= commands use the =current-kill= function.

This appendix describes the =current-kill= function as well as both the =yank= and the =yank-pop= commands, but first, consider the workings of the kill ring.

- [[#What-the-Kill-Ring-Does][What the Kill Ring Does]]
- [[#current_002dkill][current-kill]]
- [[#yank][yank]]: Paste a copy of a clipped element.
- [[#yank_002dpop][yank-pop]]: Insert element pointed to.
- [[#ring-file][ring file]]


* What the Kill Ring Does
    :PROPERTIES:
    :CUSTOM_ID: what-the-kill-ring-does
    :CLASS: unnumberedsec
    :END:

The kill ring has a default maximum length of sixty items; this number is too large for an explanation. Instead, set it to four. Please evaluate the following:

#+begin_src elisp
         (setq old-kill-ring-max kill-ring-max)
         (setq kill-ring-max 4)
#+end_src

Then, please copy each line of the following indented example into the kill ring. You may kill each line with C-k or mark it and copy it with M-w.

(In a read-only buffer, such as the *info* buffer, the kill command, C-k (=kill-line=), will not remove the text, merely copy it to the kill ring. However, your machine may beep at you. Alternatively, for silence, you may copy the region of each line with the M-w (=kill-ring-save=) command. You must mark each line for this command to succeed, but it does not matter at which end you put point or mark.)

Please invoke the calls in order, so that five elements attempt to fill the kill ring:

#+begin_src elisp
         first some text
         second piece of text
         third line
         fourth line of text
         fifth bit of text
#+end_src

Then find the value of =kill-ring= by evaluating

#+begin_src elisp
         kill-ring
#+end_src

It is:

#+begin_src elisp
         ("fifth bit of text" "fourth line of text"
         "third line" "second piece of text")
#+end_src

The first element, ‘first some text', was dropped.

To return to the old value for the length of the kill ring, evaluate:

#+begin_src elisp
         (setq kill-ring-max old-kill-ring-max)
#+end_src


Next: [[#yank][yank]], Previous: [[#What-the-Kill-Ring-Does][What the Kill Ring Does]], Up: [[#Kill-Ring][Kill Ring]]

* B.1 The =current-kill= Function
    :PROPERTIES:
    :CUSTOM_ID: b.1-the-current-kill-function
    :CLASS: appendixsec
    :END:

 The =current-kill= function changes the element in the kill ring to which =kill-ring-yank-pointer= points. (Also, the =kill-new= function sets =kill-ring-yank-pointer= to point to the latest element of the kill ring. The =kill-new= function is used directly or indirectly by =kill-append=, =copy-region-as-kill=, =kill-ring-save=, =kill-line=, and =kill-region=.)

- [[#Code-for-current_002dkill][Code for current-kill]]
- [[#Understanding-current_002dkill][Understanding current-kill]]


Next: [[#Understanding-current_002dkill][Understanding current-kill]], Up: [[#current_002dkill][current-kill]]

** The code for =current-kill=
     :PROPERTIES:
     :CUSTOM_ID: the-code-for-current-kill
     :CLASS: unnumberedsubsec
     :END:

The =current-kill= function is used by =yank= and by =yank-pop=. Here is the code for =current-kill=:

#+begin_src elisp
         (defun current-kill (n &optional do-not-move)
           "Rotate the yanking point by N places, and then return that kill.
         If N is zero and `interprogram-paste-function' is set to a
         function that returns a string or a list of strings, and if that
         function doesn't return nil, then that string (or list) is added
         to the front of the kill ring and the string (or first string in
         the list) is returned as the latest kill.
         If N is not zero, and if `yank-pop-change-selection' is
         non-nil, use `interprogram-cut-function' to transfer the
         kill at the new yank point into the window system selection.
         If optional arg DO-NOT-MOVE is non-nil, then don't actually
         move the yanking point; just return the Nth kill forward."

           (let ((interprogram-paste (and (= n 0)
                                          interprogram-paste-function
                                          (funcall interprogram-paste-function))))
             (if interprogram-paste
                 (progn
                   ;; Disable the interprogram cut function when we add the new
                   ;; text to the kill ring, so Emacs doesn't try to own the
                   ;; selection, with identical text.
                   (let ((interprogram-cut-function nil))
                     (if (listp interprogram-paste)
                       (mapc 'kill-new (nreverse interprogram-paste))
                       (kill-new interprogram-paste)))
                   (car kill-ring))
               (or kill-ring (error "Kill ring is empty"))
               (let ((ARGth-kill-element
                      (nthcdr (mod (- n (length kill-ring-yank-pointer))
                                   (length kill-ring))
                              kill-ring)))
                 (unless do-not-move
                   (setq kill-ring-yank-pointer ARGth-kill-element)
                   (when (and yank-pop-change-selection
                              (> n 0)
                              interprogram-cut-function)
                     (funcall interprogram-cut-function (car ARGth-kill-element))))
                 (car ARGth-kill-element)))))
#+end_src

Remember also that the =kill-new= function sets =kill-ring-yank-pointer= to the latest element of the kill ring, which means that all the functions that call it set the value indirectly: =kill-append=, =copy-region-as-kill=, =kill-ring-save=, =kill-line=, and =kill-region=.

Here is the line in =kill-new=, which is explained in [[#kill_002dnew-function][The =kill-new= function]].

#+begin_src elisp
         (setq kill-ring-yank-pointer kill-ring)
#+end_src


Previous: [[#Code-for-current_002dkill][Code for current-kill]], Up: [[#current_002dkill][current-kill]]

** =current-kill= in Outline
     :PROPERTIES:
     :CUSTOM_ID: current-kill-in-outline
     :CLASS: unnumberedsubsec
     :END:

The =current-kill= function looks complex, but as usual, it can be understood by taking it apart piece by piece. First look at it in skeletal form:

#+begin_src elisp
         (defun current-kill (n &optional do-not-move)
           "Rotate the yanking point by N places, and then return that kill."
           (let varlist
             body...)
#+end_src

This function takes two arguments, one of which is optional. It has a documentation string. It is /not/ interactive.

- [[#Body-of-current_002dkill][Body of current-kill]]
- [[#Digression-concerning-error][Digression concerning error]]: How to mislead humans, but not computers.
- [[#Determining-the-Element][Determining the Element]]


Next: [[#Digression-concerning-error][Digression concerning error]], Up: [[#Understanding-current_002dkill][Understanding current-kill]]

*** The Body of =current-kill=
      :PROPERTIES:
      :CUSTOM_ID: the-body-of-current-kill
      :CLASS: unnumberedsubsubsec
      :END:

The body of the function definition is a =let= expression, which itself has a body as well as a varlist.

The =let= expression declares a variable that will be only usable within the bounds of this function. This variable is called =interprogram-paste= and is for copying to another program. It is not for copying within this instance of GNU Emacs. Most window systems provide a facility for interprogram pasting. Sadly, that facility usually provides only for the last element. Most windowing systems have not adopted a ring of many possibilities, even though Emacs has provided it for decades.

The =if= expression has two parts, one if there exists =interprogram-paste= and one if not.

Let us consider the else-part of the =current-kill= function. (The then-part uses the =kill-new= function, which we have already described. See [[#kill_002dnew-function][The =kill-new= function]].)

#+begin_src elisp
         (or kill-ring (error "Kill ring is empty"))
         (let ((ARGth-kill-element
                (nthcdr (mod (- n (length kill-ring-yank-pointer))
                             (length kill-ring))
                        kill-ring)))
           (or do-not-move
               (setq kill-ring-yank-pointer ARGth-kill-element))
           (car ARGth-kill-element))
#+end_src

The code first checks whether the kill ring has content; otherwise it signals an error.

Note that the =or= expression is very similar to testing length with an =if=:



#+begin_src elisp
         (if (zerop (length kill-ring))          ; if-part
             (error "Kill ring is empty"))       ; then-part
           ;; No else-part
#+end_src

If there is not anything in the kill ring, its length must be zero and an error message sent to the user: ‘Kill ring is empty'. The =current-kill= function uses an =or= expression which is simpler. But an =if= expression reminds us what goes on.

This =if= expression uses the function =zerop= which returns true if the value it is testing is zero. When =zerop= tests true, the then-part of the =if= is evaluated. The then-part is a list starting with the function =error=, which is a function that is similar to the =message= function (see [[#message][The =message= Function]]) in that it prints a one-line message in the echo area. However, in addition to printing a message, =error= also stops evaluation of the function within which it is embedded. This means that the rest of the function will not be evaluated if the length of the kill ring is zero.

Then the =current-kill= function selects the element to return. The selection depends on the number of places that =current-kill= rotates and on where =kill-ring-yank-pointer= points.

Next, either the optional =do-not-move= argument is true or the current value of =kill-ring-yank-pointer= is set to point to the list. Finally, another expression returns the first element of the list even if the =do-not-move= argument is true.


Next: [[#Determining-the-Element][Determining the Element]], Previous: [[#Body-of-current_002dkill][Body of current-kill]], Up: [[#Understanding-current_002dkill][Understanding current-kill]]

*** Digression about the word “error”
      :PROPERTIES:
      :CUSTOM_ID: digression-about-the-word-error
      :CLASS: unnumberedsubsubsec
      :END:

In my opinion, it is slightly misleading, at least to humans, to use the term “error” as the name of the =error= function. A better term would be “cancel”. Strictly speaking, of course, you cannot point to, much less rotate a pointer to a list that has no length, so from the point of view of the computer, the word “error” is correct. But a human expects to attempt this sort of thing, if only to find out whether the kill ring is full or empty. This is an act of exploration.

From the human point of view, the act of exploration and discovery is not necessarily an error, and therefore should not be labeled as one, even in the bowels of a computer. As it is, the code in Emacs implies that a human who is acting virtuously, by exploring his or her environment, is making an error. This is bad. Even though the computer takes the same steps as it does when there is an error, a term such as “cancel” would have a clearer connotation.


Previous: [[#Digression-concerning-error][Digression concerning error]], Up: [[#Understanding-current_002dkill][Understanding current-kill]]

*** Determining the Element
      :PROPERTIES:
      :CUSTOM_ID: determining-the-element
      :CLASS: unnumberedsubsubsec
      :END:

Among other actions, the else-part of the =if= expression sets the value of =kill-ring-yank-pointer= to =ARGth-kill-element= when the kill ring has something in it and the value of =do-not-move= is =nil=.

The code looks like this:

#+begin_src elisp
         (nthcdr (mod (- n (length kill-ring-yank-pointer))
                      (length kill-ring))
                 kill-ring)))
#+end_src

This needs some examination. Unless it is not supposed to move the pointer, the =current-kill= function changes where =kill-ring-yank-pointer= points. That is what the =(setq kill-ring-yank-pointer ARGth-kill-element))= expression does. Also, clearly, =ARGth-kill-element= is being set to be equal to some cdr of the kill ring, using the =nthcdr= function that is described in an earlier section. (See [[#copy_002dregion_002das_002dkill][copy-region-as-kill]].) How does it do this?

As we have seen before (see [[#nthcdr][nthcdr]]), the =nthcdr= function works by repeatedly taking the cdr of a list---it takes the cdr of the cdr of the cdr ...

The two following expressions produce the same result:

#+begin_src elisp
         (setq kill-ring-yank-pointer (cdr kill-ring))

         (setq kill-ring-yank-pointer (nthcdr 1 kill-ring))
#+end_src

However, the =nthcdr= expression is more complicated. It uses the =mod= function to determine which cdr to select.

(You will remember to look at inner functions first; indeed, we will have to go inside the =mod=.)

The =mod= function returns the value of its first argument modulo the second; that is to say, it returns the remainder after dividing the first argument by the second. The value returned has the same sign as the second argument.

Thus,

#+begin_src elisp
         (mod 12 4)
           ⇒ 0  ;; because there is no remainder
         (mod 13 4)
           ⇒ 1
#+end_src

In this case, the first argument is often smaller than the second. That is fine.

#+begin_src elisp
         (mod 0 4)
           ⇒ 0
         (mod 1 4)
           ⇒ 1
#+end_src

We can guess what the =-= function does. It is like =+= but subtracts instead of adds; the =-= function subtracts its second argument from its first. Also, we already know what the =length= function does (see [[#length][length]]). It returns the length of a list.

And =n= is the name of the required argument to the =current-kill= function.

So when the first argument to =nthcdr= is zero, the =nthcdr= expression returns the whole list, as you can see by evaluating the following:

#+begin_src elisp
         ;; kill-ring-yank-pointer and kill-ring have a length of four
         ;; and (mod (- 0 4) 4) ⇒ 0
         (nthcdr (mod (- 0 4) 4)
                 '("fourth line of text"
                   "third line"
                   "second piece of text"
                   "first some text"))
#+end_src

When the first argument to the =current-kill= function is one, the =nthcdr= expression returns the list without its first element.

#+begin_src elisp
         (nthcdr (mod (- 1 4) 4)
                 '("fourth line of text"
                   "third line"
                   "second piece of text"
                   "first some text"))
#+end_src

Incidentally, both =kill-ring= and =kill-ring-yank-pointer= are global variables. That means that any expression in Emacs Lisp can access them. They are not like the local variables set by =let= or like the symbols in an argument list. Local variables can only be accessed within the =let= that defines them or the function that specifies them in an argument list (and within expressions called by them).

(See [[#Prevent-confusion][=let= Prevents Confusion]], and [[#defun][The =defun= Macro]].)


Next: [[#yank_002dpop][yank-pop]], Previous: [[#current_002dkill][current-kill]], Up: [[#Kill-Ring][Kill Ring]]

* B.2 =yank=
    :PROPERTIES:
    :CUSTOM_ID: b.2-yank
    :CLASS: appendixsec
    :END:

 After learning about =current-kill=, the code for the =yank= function is almost easy.

The =yank= function does not use the =kill-ring-yank-pointer= variable directly. It calls =insert-for-yank= which calls =current-kill= which sets the =kill-ring-yank-pointer= variable.

The code looks like this:

#+begin_src elisp
         (defun yank (&optional arg)
           "Reinsert (\"paste\") the last stretch of killed text.
         More precisely, reinsert the stretch of killed text most recently
         killed OR yanked.  Put point at end, and set mark at beginning.
         With just \\[universal-argument] as argument, same but put point at beginning (and mark at end).
         With argument N, reinsert the Nth most recently killed stretch of killed
         text.

         When this command inserts killed text into the buffer, it honors
         `yank-excluded-properties' and `yank-handler' as described in the
         doc string for `insert-for-yank-1', which see.

         See also the command `yank-pop' (\\[yank-pop])."
           (interactive "*P")
           (setq yank-window-start (window-start))
           ;; If we don't get all the way thru, make last-command indicate that
           ;; for the following command.
           (setq this-command t)
           (push-mark (point))
           (insert-for-yank (current-kill (cond
                                           ((listp arg) 0)
                                           ((eq arg '-) -2)
                                           (t (1- arg)))))
           (if (consp arg)
               ;; This is like exchange-point-and-mark, but doesn't activate the mark.
               ;; It is cleaner to avoid activation, even though the command
               ;; loop would deactivate the mark because we inserted text.
               (goto-char (prog1 (mark t)
                            (set-marker (mark-marker) (point) (current-buffer)))))
           ;; If we do get all the way thru, make this-command indicate that.
           (if (eq this-command t)
               (setq this-command 'yank))
           nil)
#+end_src

The key expression is =insert-for-yank=, which inserts the string returned by =current-kill=, but removes some text properties from it.

However, before getting to that expression, the function sets the value of =yank-window-start= to the position returned by the =(window-start)= expression, the position at which the display currently starts. The =yank= function also sets =this-command= and pushes the mark.

After it yanks the appropriate element, if the optional argument is a cons rather than a number or nothing, it puts point at beginning of the yanked text and mark at its end.

(The =prog1= function is like =progn= but returns the value of its first argument rather than the value of its last argument. Its first argument is forced to return the buffer's mark as an integer. You can see the documentation for these functions by placing point over them in this buffer and then typing C-h f (=describe-function=) followed by a RET; the default is the function.)

The last part of the function tells what to do when it succeeds.


Next: [[#ring-file][ring file]], Previous: [[#yank][yank]], Up: [[#Kill-Ring][Kill Ring]]

* B.3 =yank-pop=
    :PROPERTIES:
    :CUSTOM_ID: b.3-yank-pop
    :CLASS: appendixsec
    :END:

 After understanding =yank= and =current-kill=, you know how to approach the =yank-pop= function. Leaving out the documentation to save space, it looks like this:

#+begin_src elisp
         (defun yank-pop (&optional arg)
           "..."
           (interactive "*p")
           (if (not (eq last-command 'yank))
               (error "Previous command was not a yank"))
           (setq this-command 'yank)
           (unless arg (setq arg 1))
           (let ((inhibit-read-only t)
                 (before (< (point) (mark t))))
             (if before
                 (funcall (or yank-undo-function 'delete-region) (point) (mark t))
               (funcall (or yank-undo-function 'delete-region) (mark t) (point)))
             (setq yank-undo-function nil)
             (set-marker (mark-marker) (point) (current-buffer))
             (insert-for-yank (current-kill arg))
             ;; Set the window start back where it was in the yank command,
             ;; if possible.
             (set-window-start (selected-window) yank-window-start t)
             (if before
                 ;; This is like exchange-point-and-mark,
                 ;;     but doesn't activate the mark.
                 ;; It is cleaner to avoid activation, even though the command
                 ;; loop would deactivate the mark because we inserted text.
                 (goto-char (prog1 (mark t)
                              (set-marker (mark-marker)
                                          (point)
                                          (current-buffer))))))
           nil)
#+end_src

The function is interactive with a small ‘p' so the prefix argument is processed and passed to the function. The command can only be used after a previous yank; otherwise an error message is sent. This check uses the variable =last-command= which is set by =yank= and is discussed elsewhere. (See [[#copy_002dregion_002das_002dkill][copy-region-as-kill]].)

The =let= clause sets the variable =before= to true or false depending whether point is before or after mark and then the region between point and mark is deleted. This is the region that was just inserted by the previous yank and it is this text that will be replaced.

=funcall= calls its first argument as a function, passing remaining arguments to it. The first argument is whatever the =or= expression returns. The two remaining arguments are the positions of point and mark set by the preceding =yank= command.

There is more, but that is the hardest part.


Previous: [[#yank_002dpop][yank-pop]], Up: [[#Kill-Ring][Kill Ring]]

* B.4 The ring.el File
    :PROPERTIES:
    :CUSTOM_ID: b.4-the-ring.el-file
    :CLASS: appendixsec
    :END:

 Interestingly, GNU Emacs posses a file called ring.el that provides many of the features we just discussed. But functions such as =kill-ring-yank-pointer= do not use this library, possibly because they were written earlier.


Next: [[#Free-Software-and-Free-Manuals][Free Software and Free Manuals]], Previous: [[#Kill-Ring][Kill Ring]], Up: [[#Top][Top]]
