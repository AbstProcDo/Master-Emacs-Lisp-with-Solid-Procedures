#+TITLE: 07.Records
* 7 Records
   :PROPERTIES:
   :CUSTOM_ID: records
   :END:

The purpose of records is to allow programmers to create objects with new types that are not built into Emacs. They are used as the underlying representation of =cl-defstruct= and =defclass= instances.

Internally, a record object is much like a vector; its slots can be accessed using =aref= and it can be copied using =copy-sequence=. However, the first slot is used to hold its type as returned by =type-of=. Also, in the current implementation records can have at most 4096 slots, whereas vectors can be much larger. Like arrays, records use zero-origin indexing: the first slot has index 0.

The type slot should be a symbol or a type descriptor. If it's a type descriptor, the symbol naming its type will be returned; [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Type-Descriptors][Type Descriptors]]. Any other kind of object is returned as-is.

The printed representation of records is '#s' followed by a list specifying the contents. The first list element must be the record type. The following elements are the record slots.

To avoid conflicts with other type names, Lisp programs that define new types of records should normally use the naming conventions of the package where these record types are introduced for the names of the types. Note that the names of the types which could possibly conflict might not be known at the time the package defining a record type is loaded; they could be loaded at some future point in time.

A record is considered a constant for evaluation: the result of evaluating it is the same record. This does not evaluate or even examine the slots. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Self_002dEvaluating-Forms][Self-Evaluating Forms]].

1) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Record-Functions][Record Functions]]: Functions for records.
2) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Backward-Compatibility][Backward Compatibility]]: Compatibility for cl-defstruct.


* 7.1 Record Functions
    :PROPERTIES:
    :CUSTOM_ID: record-functions
    :END:

--- Function: *recordp* object

#+BEGIN_QUOTE
  This function returns =t= if object is a record.

  #+BEGIN_EXAMPLE
                (recordp #s(a))
                     ⇒ t
  #+END_EXAMPLE
#+END_QUOTE

--- Function: *record* type &rest objects

#+BEGIN_QUOTE
  This function creates and returns a record whose type is type and remaining slots are the rest of the arguments, objects.

  #+BEGIN_EXAMPLE
                (record 'foo 23 [bar baz] "rats")
                     ⇒ #s(foo 23 [bar baz] "rats")
  #+END_EXAMPLE
#+END_QUOTE

--- Function: *make-record* type length object

#+BEGIN_QUOTE
  This function returns a new record with type type and length more slots, each initialized to object.

  #+BEGIN_EXAMPLE
                (setq sleepy (make-record 'foo 9 'Z))
                     ⇒ #s(foo Z Z Z Z Z Z Z Z Z)
  #+END_EXAMPLE
#+END_QUOTE



* 7.2 Backward Compatibility
    :PROPERTIES:
    :CUSTOM_ID: backward-compatibility
    :END:

Code compiled with older versions of =cl-defstruct= that doesn't use records may run into problems when used in a new Emacs. To alleviate this, Emacs detects when an old =cl-defstruct= is used, and enables a mode in which =type-of= handles old struct objects as if they were records.

--- Function: *cl-old-struct-compat-mode* arg

#+BEGIN_QUOTE
  If arg is positive, enable backward compatibility with old-style structs.
#+END_QUOTE
