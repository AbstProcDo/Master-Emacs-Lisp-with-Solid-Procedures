#+TITLE: Appendix D Tips and Conventions
* Appendix D Tips and Conventions
   :PROPERTIES:
   :CUSTOM_ID: appendix-d-tips-and-conventions
   :END:

This chapter describes no additional features of Emacs Lisp. Instead it gives advice on making effective use of the features described in the previous chapters, and describes conventions Emacs Lisp programmers should follow.

You can automatically check some of the conventions described below by running the command M-x checkdoc when visiting a Lisp file. It cannot check all of the conventions, and not all the warnings it gives necessarily correspond to problems, but it is worth examining them all. Alternatively, use the command M-x checkdoc-current-buffer to check the conventions in the current buffer, or =checkdoc-file= when you want to check a file in batch mode, e.g., with a command run by M-x compile .

1) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Coding-Conventions][Coding Conventions]]: Conventions for clean and robust programs.
2) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Key-Binding-Conventions][Key Binding Conventions]]: Which keys should be bound by which programs.
3) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Programming-Tips][Programming Tips]]: Making Emacs code fit smoothly in Emacs.
4) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Compilation-Tips][Compilation Tips]]: Making compiled code run fast.
5) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Warning-Tips][Warning Tips]]: Turning off compiler warnings.
6) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Documentation-Tips][Documentation Tips]]: Writing readable documentation strings.
7) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Comment-Tips][Comment Tips]]: Conventions for writing comments.
8) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Library-Headers][Library Headers]]: Standard headers for library packages.



* D.1 Emacs Lisp Coding Conventions
    :PROPERTIES:
    :CUSTOM_ID: d.1-emacs-lisp-coding-conventions
    :END:

Here are conventions that you should follow when writing Emacs Lisp code intended for widespread use:

- Simply loading a package should not change Emacs's editing behavior. Include a command or commands to enable and disable the feature, or to invoke it.

  This convention is mandatory for any file that includes custom definitions. If fixing such a file to follow this convention requires an incompatible change, go ahead and make the incompatible change; don't postpone it.

- You should choose a short word to distinguish your program from other Lisp programs. The names of all global symbols in your program, that is the names of variables, constants, and functions, should begin with that chosen prefix. Separate the prefix from the rest of the name with a hyphen, ‘

  -

  '. This practice helps avoid name conflicts, since all global variables in Emacs Lisp share the same name space, and all functions share another name space

  22

  . Use two hyphens to separate prefix and name if the symbol is not meant to be used by other packages.

  Occasionally, for a command name intended for users to use, it is more convenient if some words come before the package's name prefix. For example, it is our convention to have commands that list objects named as 'list-something', e.g., a package called 'frob' could have a command 'list-frobs', when its other global symbols begin with 'frob-'. Also, constructs that define functions, variables, etc., work better if they start with 'defun' or 'defvar', so put the name prefix later on in the name.

  This recommendation applies even to names for traditional Lisp primitives that are not primitives in Emacs Lisp---such as =copy-list=. Believe it or not, there is more than one plausible way to define =copy-list=. Play it safe; append your name prefix to produce a name like =foo-copy-list= or =mylib-copy-list= instead.

  If you write a function that you think ought to be added to Emacs under a certain name, such as =twiddle-files=, don't call it by that name in your program. Call it =mylib-twiddle-files= in your program, and send mail to 'bug-gnu-emacs@gnu.org' suggesting we add it to Emacs. If and when we do, we can change the name easily enough.

  If one prefix is insufficient, your package can use two or three alternative common prefixes, so long as they make sense.

- Put a call to =provide= at the end of each separate Lisp file. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Named-Features][Named Features]].

- If a file requires certain other Lisp programs to be loaded beforehand, then the comments at the beginning of the file should say so. Also, use =require= to make sure they are loaded. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Named-Features][Named Features]].

- If a file

  foo

  uses a macro defined in another file

  bar

  , but does not use any functions or variables defined in

  bar

  , then

  foo

  should contain the following expression:

  #+BEGIN_EXAMPLE
                (eval-when-compile (require 'bar))
  #+END_EXAMPLE

  This tells Emacs to load bar just before byte-compiling foo, so that the macro definition is available during compilation. Using =eval-when-compile= avoids loading bar when the compiled version of foo is /used/. It should be called before the first use of the macro in the file. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Compiling-Macros][Compiling Macros]].

- Avoid loading additional libraries at run time unless they are really needed. If your file simply cannot work without some other library, then just =require= that library at the top-level and be done with it. But if your file contains several independent features, and only one or two require the extra library, then consider putting =require= statements inside the relevant functions rather than at the top-level. Or use =autoload= statements to load the extra library when needed. This way people who don't use those aspects of your file do not need to load the extra library.

- If you need Common Lisp extensions, use the

  #+BEGIN_EXAMPLE
      cl-lib
  #+END_EXAMPLE

  library rather than the old

  #+BEGIN_EXAMPLE
      cl
  #+END_EXAMPLE

  library. The latter does not use a clean namespace (i.e., its definitions do not start with a ‘

  cl-

  ' prefix). If your package loads

  #+BEGIN_EXAMPLE
      cl
  #+END_EXAMPLE

  at run time, that could cause name clashes for users who don't use that package.

  There is no problem with using the =cl= package at /compile/ time, with =(eval-when-compile (require 'cl))=. That's sufficient for using the macros in the =cl= package, because the compiler expands them before generating the byte-code. It is still better to use the more modern =cl-lib= in this case, though.

- When defining a major mode, please follow the major mode conventions. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Major-Mode-Conventions][Major Mode Conventions]].

- When defining a minor mode, please follow the minor mode conventions. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Minor-Mode-Conventions][Minor Mode Conventions]].

- If the purpose of a function is to tell you whether a certain condition is true or false, give the function a name that ends in 'p' (which stands for "predicate"). If the name is one word, add just 'p'; if the name is multiple words, add '-p'. Examples are =framep= and =frame-live-p=.

- If the purpose of a variable is to store a single function, give it a name that ends in '-function'. If the purpose of a variable is to store a list of functions (i.e., the variable is a hook), please follow the naming conventions for hooks. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Hooks][Hooks]].

- If loading the file adds functions to hooks, define a function feature=-unload-function=, where feature is the name of the feature the package provides, and make it undo any such changes. Using =unload-feature= to unload the file will run this function. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Unloading][Unloading]].

- It is a bad idea to define aliases for the Emacs primitives. Normally you should use the standard names instead. The case where an alias may be useful is where it facilitates backwards compatibility or portability.

- If a package needs to define an alias or a new function for compatibility with some other version of Emacs, name it with the package prefix, not with the raw name with which it occurs in the other version. Here is an example from Gnus, which provides many examples of such compatibility issues.

  #+BEGIN_EXAMPLE
                (defalias 'gnus-point-at-bol
                  (if (fboundp 'point-at-bol)
                      'point-at-bol
                    'line-beginning-position))
  #+END_EXAMPLE

- Redefining or advising an Emacs primitive is a bad idea. It may do the right thing for a particular program, but there is no telling what other programs might break as a result.

- It is likewise a bad idea for one Lisp package to advise a function in another Lisp package (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Advising-Functions][Advising Functions]]).

- Avoid using =eval-after-load= and =with-eval-after-load= in libraries and packages (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Hooks-for-Loading][Hooks for Loading]]). This feature is meant for personal customizations; using it in a Lisp program is unclean, because it modifies the behavior of another Lisp file in a way that's not visible in that file. This is an obstacle for debugging, much like advising a function in the other package.

- If a file does replace any of the standard functions or library programs of Emacs, prominent comments at the beginning of the file should say which functions are replaced, and how the behavior of the replacements differs from that of the originals.

- Constructs that define a function or variable should be macros, not functions, and their names should start with 'define-'. The macro should receive the name to be defined as the first argument. That will help various tools find the definition automatically. Avoid constructing the names in the macro itself, since that would confuse these tools.

- In some other systems there is a convention of choosing variable names that begin and end with ‘*'. We don't use that convention in Emacs Lisp, so please don't use it in your programs. (Emacs uses such names only for special-purpose buffers.) People will find Emacs more coherent if all libraries use the same conventions.

- The default file coding system for Emacs Lisp source files is UTF-8 (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Text-Representations][Text Representations]]). In the rare event that your program contains characters which are /not/ in UTF-8, you should specify an appropriate coding system in the source file's ‘-*-' line or local variables list. See [[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#File-Variables][Local Variables in Files]].

- Indent the file using the default indentation parameters.

- Don't make a habit of putting close-parentheses on lines by themselves; Lisp programmers find this disconcerting.

- Please put a copyright notice and copying permission notice on the file if you distribute copies. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Library-Headers][Library Headers]].

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Programming-Tips][Programming Tips]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Coding-Conventions][Coding Conventions]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Tips][Tips]]

* D.2 Key Binding Conventions
    :PROPERTIES:
    :CUSTOM_ID: d.2-key-binding-conventions
    :END:

​

- Many special major modes, like Dired, Info, Compilation, and Occur, are designed to handle read-only text that contains hyper-links. Such a major mode should redefine mouse-2 and to follow the links. It should also set up a =follow-link= condition, so that the link obeys =mouse-1-click-follows-link=. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Clickable-Text][Clickable Text]]. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Buttons][Buttons]], for an easy method of implementing such clickable links.

- Don't define

  C-c

  letter

  as a key in Lisp programs. Sequences consisting of

  C-c

  and a letter (either upper or lower case) are reserved for users; they are the

  only

  sequences reserved for users, so do not block them.

  Changing all the Emacs major modes to respect this convention was a lot of work; abandoning this convention would make that work go to waste, and inconvenience users. Please comply with it.

- Function keys through without modifier keys are also reserved for users to define.

- Sequences consisting of C-c followed by a control character or a digit are reserved for major modes.

- Sequences consisting of C-c followed by {, }, <, >, : or ; are also reserved for major modes.

- Sequences consisting of C-c followed by any other ASCII punctuation or symbol character are allocated for minor modes. Using them in a major mode is not absolutely prohibited, but if you do that, the major mode binding may be shadowed from time to time by minor modes.

- Don't bind C-h following any prefix character (including C-c). If you don't bind C-h, it is automatically available as a help character for listing the subcommands of the prefix character.

- Don't bind a key sequence ending in except following another . (That is, it is OK to bind a sequence ending in

  .)

  The reason for this rule is that a non-prefix binding for in any context prevents recognition of escape sequences as function keys in that context.

- Similarly, don't bind a key sequence ending in C-g, since that is commonly used to cancel a key sequence.

- Anything that acts like a temporary mode or state that the user can enter and leave should define

  or

  as a way to escape.

  For a state that accepts ordinary Emacs commands, or more generally any kind of state in which followed by a function key or arrow key is potentially meaningful, then you must not define , since that would preclude recognizing an escape sequence after . In these states, you should define as the way to escape. Otherwise, define instead.

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Compilation-Tips][Compilation Tips]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Key-Binding-Conventions][Key Binding Conventions]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Tips][Tips]]

* D.3 Emacs Programming Tips
    :PROPERTIES:
    :CUSTOM_ID: d.3-emacs-programming-tips
    :END:

Following these conventions will make your program fit better into Emacs when it runs.

- Don't use =next-line= or =previous-line= in programs; nearly always, =forward-line= is more convenient as well as more predictable and robust. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Text-Lines][Text Lines]].

- Don't call functions that set the mark, unless setting the mark is one of the intended features of your program. The mark is a user-level feature, so it is incorrect to change the mark except to supply a value for the user's benefit. See

  The Mark

  .

  In particular, don't use any of these functions:

  - =beginning-of-buffer=, =end-of-buffer=
  - =replace-string=, =replace-regexp=
  - =insert-file=, =insert-buffer=

  If you just want to move point, or replace a certain string, or insert a file or buffer's contents, without any of the other features intended for interactive users, you can replace these functions with one or two lines of simple Lisp code.

- Use lists rather than vectors, except when there is a particular reason to use a vector. Lisp has more facilities for manipulating lists than for vectors, and working with lists is usually more convenient.

  Vectors are advantageous for tables that are substantial in size and are accessed in random order (not searched front to back), provided there is no need to insert or delete elements (only lists allow that).

- The recommended way to show a message in the echo area is with the =message= function, not =princ=. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#The-Echo-Area][The Echo Area]].

- When you encounter an error condition, call the function

  #+BEGIN_EXAMPLE
      error
  #+END_EXAMPLE

  (or

  #+BEGIN_EXAMPLE
      signal
  #+END_EXAMPLE

  ). The function

  #+BEGIN_EXAMPLE
      error
  #+END_EXAMPLE

  does not return. See

  Signaling Errors

  .

  Don't use =message=, =throw=, =sleep-for=, or =beep= to report errors.

- An error message should start with a capital letter but should not end with a period.

- A question asked in the minibuffer with =yes-or-no-p= or =y-or-n-p= should start with a capital letter and end with '?'.

- When you mention a default value in a minibuffer prompt, put it and the word ‘

  default

  ' inside parentheses. It should look like this:

  #+BEGIN_EXAMPLE
                Enter the answer (default 42):
  #+END_EXAMPLE

- In

  #+BEGIN_EXAMPLE
      interactive
  #+END_EXAMPLE

  , if you use a Lisp expression to produce a list of arguments, don't try to provide the correct default values for region or position arguments. Instead, provide

  #+BEGIN_EXAMPLE
      nil
  #+END_EXAMPLE

  for those arguments if they were not specified, and have the function body compute the default value when the argument is

  #+BEGIN_EXAMPLE
      nil
  #+END_EXAMPLE

  . For instance, write this:

  #+BEGIN_EXAMPLE
                (defun foo (pos)
                  (interactive
                   (list (if specified specified-pos)))
                  (unless pos (setq pos default-pos))
                  ...)
  #+END_EXAMPLE

  rather than this:

  #+BEGIN_EXAMPLE
                (defun foo (pos)
                  (interactive
                   (list (if specified specified-pos
                             default-pos)))
                  ...)
  #+END_EXAMPLE

  This is so that repetition of the command will recompute these defaults based on the current circumstances.

  You do not need to take such precautions when you use interactive specs 'd', 'm' and 'r', because they make special arrangements to recompute the argument values on repetition of the command.

- Many commands that take a long time to execute display a message that says something like 'Operating...' when they start, and change it to 'Operating...done' when they finish. Please keep the style of these messages uniform: /no/ space around the ellipsis, and /no/ period after 'done'. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Progress][Progress]], for an easy way to generate such messages.

- Try to avoid using recursive edits. Instead, do what the Rmail e command does: use a new local keymap that contains a command defined to switch back to the old local keymap. Or simply switch to another buffer and let the user switch back at will. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Recursive-Editing][Recursive Editing]].

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Warning-Tips][Warning Tips]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Programming-Tips][Programming Tips]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Tips][Tips]]

* D.4 Tips for Making Compiled Code Fast
    :PROPERTIES:
    :CUSTOM_ID: d.4-tips-for-making-compiled-code-fast
    :END:

Here are ways of improving the execution speed of byte-compiled Lisp programs.

- Profile your program, to find out where the time is being spent. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Profiling][Profiling]].

- Use iteration rather than recursion whenever possible. Function calls are slow in Emacs Lisp even when a compiled function is calling another compiled function.

- Using the primitive list-searching functions =memq=, =member=, =assq=, or =assoc= is even faster than explicit iteration. It can be worth rearranging a data structure so that one of these primitive search functions can be used.

- Certain built-in functions are handled specially in byte-compiled code, avoiding the need for an ordinary function call. It is a good idea to use these functions rather than alternatives. To see whether a function is handled specially by the compiler, examine its

  #+BEGIN_EXAMPLE
      byte-compile
  #+END_EXAMPLE

  property. If the property is non-

  #+BEGIN_EXAMPLE
      nil
  #+END_EXAMPLE

  , then the function is handled specially.

  For example, the following input will show you that =aref= is compiled specially (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Array-Functions][Array Functions]]):

  #+BEGIN_EXAMPLE
                (get 'aref 'byte-compile)
                     ⇒ byte-compile-two-args
  #+END_EXAMPLE

  Note that in this case (and many others), you must first load the bytecomp library, which defines the =byte-compile= property.

- If calling a small function accounts for a substantial part of your program's running time, make the function inline. This eliminates the function call overhead. Since making a function inline reduces the flexibility of changing the program, don't do it unless it gives a noticeable speedup in something slow enough that users care about the speed. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Inline-Functions][Inline Functions]].

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Documentation-Tips][Documentation Tips]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Compilation-Tips][Compilation Tips]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Tips][Tips]]

* D.5 Tips for Avoiding Compiler Warnings
    :PROPERTIES:
    :CUSTOM_ID: d.5-tips-for-avoiding-compiler-warnings
    :END:

​

- Try to avoid compiler warnings about undefined free variables, by adding dummy

  #+BEGIN_EXAMPLE
      defvar
  #+END_EXAMPLE

  definitions for these variables, like this:

  #+BEGIN_EXAMPLE
                (defvar foo)
  #+END_EXAMPLE

  Such a definition has no effect except to tell the compiler not to warn about uses of the variable =foo= in this file.

- Similarly, to avoid a compiler warning about an undefined function that you know /will/ be defined, use a =declare-function= statement (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Declaring-Functions][Declaring Functions]]).

- If you use many functions, macros, and variables from a certain file, you can add a

  #+BEGIN_EXAMPLE
      require
  #+END_EXAMPLE

  (see

  require

  ) for that package to avoid compilation warnings for them, like this:

  #+BEGIN_EXAMPLE
                (require 'foo)
  #+END_EXAMPLE

  If you need only macros from some file, you can require it only at compile time (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Eval-During-Compile][Eval During Compile]]). For instance,

  #+BEGIN_EXAMPLE
                (eval-when-compile
                  (require 'foo))
  #+END_EXAMPLE

- If you bind a variable in one function, and use it or set it in another function, the compiler warns about the latter function unless the variable has a definition. But adding a definition would be unclean if the variable has a short name, since Lisp packages should not define short variable names. The right thing to do is to rename this variable to start with the name prefix used for the other functions and variables in your package.

- The last resort for avoiding a warning, when you want to do something that is usually a mistake but you know is not a mistake in your usage, is to put it inside =with-no-warnings=. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Compiler-Errors][Compiler Errors]].

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Comment-Tips][Comment Tips]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Warning-Tips][Warning Tips]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Tips][Tips]]

* D.6 Tips for Documentation Strings
    :PROPERTIES:
    :CUSTOM_ID: d.6-tips-for-documentation-strings
    :END:

Here are some tips and conventions for the writing of documentation strings. You can check many of these conventions by running the command M-x checkdoc-minor-mode.

- Every command, function, or variable intended for users to know about should have a documentation string.

- An internal variable or subroutine of a Lisp program might as well have a documentation string. Documentation strings take up very little space in a running Emacs.

- Format the documentation string so that it fits in an Emacs window on an 80-column screen. It is a good idea for most lines to be no wider than 60 characters. The first line should not be wider than 67 characters or it will look bad in the output of

  #+BEGIN_EXAMPLE
      apropos
  #+END_EXAMPLE

  .

  You can fill the text if that looks good. Emacs Lisp mode fills documentation strings to the width specified by =emacs-lisp-docstring-fill-column=. However, you can sometimes make a documentation string much more readable by adjusting its line breaks with care. Use blank lines between sections if the documentation string is long.

- The first line of the documentation string should consist of one or two complete sentences that stand on their own as a summary.

  M-x apropos

  displays just the first line, and if that line's contents don't stand on their own, the result looks bad. In particular, start the first line with a capital letter and end it with a period.

  For a function, the first line should briefly answer the question, "What does this function do?" For a variable, the first line should briefly answer the question, "What does this value mean?"

  Don't limit the documentation string to one line; use as many lines as you need to explain the details of how to use the function or variable. Please use complete sentences for the rest of the text too.

- When the user tries to use a disabled command, Emacs displays just the first paragraph of its documentation string---everything through the first blank line. If you wish, you can choose which information to include before the first blank line so as to make this display useful.

- The first line should mention all the important arguments of the function, and should mention them in the order that they are written in a function call. If the function has many arguments, then it is not feasible to mention them all in the first line; in that case, the first line should mention the first few arguments, including the most important arguments.

- When a function's documentation string mentions the value of an argument of the function, use the argument name in capital letters as if it were a name for that value. Thus, the documentation string of the function

  #+BEGIN_EXAMPLE
      eval
  #+END_EXAMPLE

  refers to its first argument as ‘

  FORM

  ', because the actual argument name is

  #+BEGIN_EXAMPLE
      form
  #+END_EXAMPLE

  :

  #+BEGIN_EXAMPLE
                Evaluate FORM and return its value.
  #+END_EXAMPLE

  Also write metasyntactic variables in capital letters, such as when you show the decomposition of a list or vector into subunits, some of which may vary. 'KEY' and 'VALUE' in the following example illustrate this practice:

  #+BEGIN_EXAMPLE
                The argument TABLE should be an alist whose elements
                have the form (KEY . VALUE).  Here, KEY is ...
  #+END_EXAMPLE

- Never change the case of a Lisp symbol when you mention it in a doc string. If the symbol's name is

  #+BEGIN_EXAMPLE
      foo
  #+END_EXAMPLE

  , write "foo", not "Foo" (which is a different symbol).

  This might appear to contradict the policy of writing function argument values, but there is no real contradiction; the argument /value/ is not the same thing as the /symbol/ that the function uses to hold the value.

  If this puts a lower-case letter at the beginning of a sentence and that annoys you, rewrite the sentence so that the symbol is not at the start of it.

- Do not start or end a documentation string with whitespace.

- Do not

  indent subsequent lines of a documentation string so that the text is lined up in the source code with the text of the first line. This looks nice in the source code, but looks bizarre when users view the documentation. Remember that the indentation before the starting double-quote is not part of the string!

- When a documentation string refers to a Lisp symbol, write it as it would be printed (which usually means in lower case), surrounding it with curved single quotes (

  '..'

  ). There are two exceptions: write

  #+BEGIN_EXAMPLE
      t
  #+END_EXAMPLE

  and

  #+BEGIN_EXAMPLE
      nil
  #+END_EXAMPLE

  without surrounding punctuation. For example:

  #+BEGIN_EXAMPLE
                 CODE can be ‘lambda’, nil, or t.
  #+END_EXAMPLE

  See [[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Quotation-Marks][Quotation Marks]], for how to enter curved single quotes.

  Documentation strings can also use an older single-quoting convention, which quotes symbols with grave accent `=and apostrophe `'`:=like-this'=rather than='like-this'`. This older convention was designed for now-obsolete displays in which grave accent and apostrophe were mirror images. Documentation using this convention is converted to the user's preferred format when it is copied into a help buffer. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Keys-in-Documentation][Keys in Documentation]].

  Help mode automatically creates a hyperlink when a documentation string uses a single-quoted symbol name, if the symbol has either a function or a variable definition. You do not need to do anything special to make use of this feature. However, when a symbol has both a function definition and a variable definition, and you want to refer to just one of them, you can specify which one by writing one of the words 'variable', 'option', 'function', or 'command', immediately before the symbol name. (Case makes no difference in recognizing these indicator words.) For example, if you write

  #+BEGIN_EXAMPLE
                This function sets the variable `buffer-file-name'.
  #+END_EXAMPLE

  then the hyperlink will refer only to the variable documentation of =buffer-file-name=, and not to its function documentation.

  If a symbol has a function definition and/or a variable definition, but those are irrelevant to the use of the symbol that you are documenting, you can write the words 'symbol' or 'program' before the symbol name to prevent making any hyperlink. For example,

  #+BEGIN_EXAMPLE
                If the argument KIND-OF-RESULT is the symbol `list',
                this function returns a list of all the objects
                that satisfy the criterion.
  #+END_EXAMPLE

  does not make a hyperlink to the documentation, irrelevant here, of the function =list=.

  Normally, no hyperlink is made for a variable without variable documentation. You can force a hyperlink for such variables by preceding them with one of the words 'variable' or 'option'.

  Hyperlinks for faces are only made if the face name is preceded or followed by the word 'face'. In that case, only the face documentation will be shown, even if the symbol is also defined as a variable or as a function.

  To make a hyperlink to Info documentation, write the single-quoted name of the Info node (or anchor), preceded by 'info node', 'Info node', 'info anchor' or 'Info anchor'. The Info file name defaults to 'emacs'. For example,

  #+BEGIN_EXAMPLE
                See Info node `Font Lock' and Info node `(elisp)Font Lock Basics'.
  #+END_EXAMPLE

  Finally, to create a hyperlink to URLs, write the single-quoted URL, preceded by 'URL'. For example,

  #+BEGIN_EXAMPLE
                The home page for the GNU project has more information (see URL
                `https://www.gnu.org/').
  #+END_EXAMPLE

- Don't write key sequences directly in documentation strings. Instead, use the '\[...]' construct to stand for them. For example, instead of writing 'C-f', write the construct '\[forward-char]'. When Emacs displays the documentation string, it substitutes whatever key is currently bound to =forward-char=. (This is normally 'C-f', but it may be some other character if the user has moved key bindings.) See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Keys-in-Documentation][Keys in Documentation]].

- In documentation strings for a major mode, you will want to refer to the key bindings of that mode's local map, rather than global ones. Therefore, use the construct ‘

  \<...>

  ' once in the documentation string to specify which key map to use. Do this before the first use of ‘

  \[...]

  '. The text inside the ‘

  \<...>

  ' should be the name of the variable containing the local keymap for the major mode.

  It is not practical to use '\[...]' very many times, because display of the documentation string will become slow. So use this to describe the most important commands in your major mode, and then use '\{...}' to display the rest of the mode's keymap.

- For consistency, phrase the verb in the first sentence of a function's documentation string as an imperative---for instance, use "Return the cons of A and B." in preference to "Returns the cons of A and B." Usually it looks good to do likewise for the rest of the first paragraph. Subsequent paragraphs usually look better if each sentence is indicative and has a proper subject.

- The documentation string for a function that is a yes-or-no predicate should start with words such as "Return t if", to indicate explicitly what constitutes truth. The word "return" avoids starting the sentence with lower-case "t", which could be somewhat distracting.

- If a line in a documentation string begins with an open-parenthesis, write a backslash before the open-parenthesis, like this:

  #+BEGIN_EXAMPLE
                The argument FOO can be either a number
                \(a buffer position) or a string (a file name).
  #+END_EXAMPLE

  This prevents the open-parenthesis from being treated as the start of a defun (see [[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Defuns][Defuns]]).

- Write documentation strings in the active voice, not the passive, and in the present tense, not the future. For instance, use "Return a list containing A and B." instead of "A list containing A and B will be returned."

- Avoid using the word "cause" (or its equivalents) unnecessarily. Instead of, "Cause Emacs to display text in boldface", write just "Display text in boldface".

- Avoid using "iff" (a mathematics term meaning "if and only if"), since many people are unfamiliar with it and mistake it for a typo. In most cases, the meaning is clear with just "if". Otherwise, try to find an alternate phrasing that conveys the meaning.

- When a command is meaningful only in a certain mode or situation, do mention that in the documentation string. For example, the documentation of

  #+BEGIN_EXAMPLE
      dired-find-file
  #+END_EXAMPLE

  is:

  #+BEGIN_EXAMPLE
                In Dired, visit the file or directory named on this line.
  #+END_EXAMPLE

- When you define a variable that represents an option users might want to set, use =defcustom=. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Defining-Variables][Defining Variables]].

- The documentation string for a variable that is a yes-or-no flag should start with words such as "Non-nil means", to make it clear that all non-=nil= values are equivalent and indicate explicitly what =nil= and non-=nil= mean.

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Library-Headers][Library Headers]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Documentation-Tips][Documentation Tips]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Tips][Tips]]

* D.7 Tips on Writing Comments
    :PROPERTIES:
    :CUSTOM_ID: d.7-tips-on-writing-comments
    :END:

We recommend these conventions for comments:

- ';'

  Comments that start with a single semicolon, ';', should all be aligned to the same column on the right of the source code. Such comments usually explain how the code on that line does its job. For example:
  #+begin_src emacs-lisp :tangle yes
          (setq base-version-list                 ; There was a base
                (assoc (substring fn 0 start-vn)  ; version to which
                       file-version-assoc-list))  ; this looks like
                                                  ; a subversion.
  #+end_src



- ';;'

  Comments that start with two semicolons, ';;', should be aligned to the same level of indentation as the code. Such comments usually describe the purpose of the following lines or the state of the program at that point. For example:
  #+begin_src emacs-lisp :tangle yes
          (prog1 (setq auto-fill-function
                       ...
                       ...
            ;; Update mode line.
            (force-mode-line-update)))
  #+end_src

We also normally use two semicolons for comments outside functions.
#+begin_src emacs-lisp :tangle yes
          ;; This Lisp code is run in Emacs when it is to operate as
          ;; a server for other processes.
#+end_src
# 得到：comment function方法.
If a function has no documentation string, it should instead have a two-semicolon comment right before the function, explaining what the function does and how to call it properly. Explain precisely what each argument means and how the function interprets its possible values. It is much better to convert such comments to documentation strings, though.

- ';;;'

  Comments that start with three semicolons, ';;;', should start at the left margin. We use them for comments which should be considered a heading by Outline minor mode. By default, comments starting with at least three semicolons (followed by a single space and a non-whitespace character) are considered headings, comments starting with two or fewer are not. Historically, triple-semicolon comments have also been used for commenting out lines within a function, but this use is discouraged. When commenting out entire functions, use two semicolons.
  # 短评: 有点意思, minor-mode

- ';;;;'

  Comments that start with four semicolons, ';;;;', should be aligned to the left margin and are used for headings of major sections of a program. For example:
  #+begin_src emacs-lisp :tangle yes
=;;;; The kill ring=
  #+end_src

Generally speaking, the M-; (=comment-dwim=) command automatically starts a comment of the appropriate type; or indents an existing comment to the right place, depending on the number of semicolons. See [[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Comments][Manipulating Comments]].
# 短评：我日常确实是有点"滥用"comments.


* D.8 Conventional Headers for Emacs Libraries
    :PROPERTIES:
    :CUSTOM_ID: d.8-conventional-headers-for-emacs-libraries
    :END:

Emacs has conventions for using special comments in Lisp libraries to divide them into sections and give information such as who wrote them. Using a standard format for these items makes it easier for tools (and people) to extract the relevant information. This section explains these conventions, starting with an example:

#+BEGIN_EXAMPLE
         ;;; foo.el --- Support for the Foo programming language

         ;; Copyright (C) 2010-2019 Your Name

         ;; Author: Your Name <yourname@example.com>
         ;; Maintainer: Someone Else <someone@example.com>
         ;; Created: 14 Jul 2010
         ;; Keywords: languages
         ;; Homepage: http://example.com/foo

         ;; This file is not part of GNU Emacs.

         ;; This file is free software...
         ...
         ;; along with this file.  If not, see <https://www.gnu.org/licenses/>.
#+END_EXAMPLE

The very first line should have this format:

#+BEGIN_EXAMPLE
         ;;; filename --- description
#+END_EXAMPLE

The description should be contained in one line. If the file needs a ‘-*-' specification, put it after description. If this would make the first line too long, use a Local Variables section at the end of the file.

The copyright notice usually lists your name (if you wrote the file). If you have an employer who claims copyright on your work, you might need to list them instead. Do not say that the copyright holder is the Free Software Foundation (or that the file is part of GNU Emacs) unless your file has been accepted into the Emacs distribution. For more information on the form of copyright and license notices, see [[https://www.gnu.org/licenses/gpl-howto.html][the guide on the GNU website]].

After the copyright notice come several header comment lines, each beginning with ';; header-name:'. Here is a table of the conventional possibilities for header-name:

- 'Author'

  This line states the name and email address of at least the principal author of the library. If there are multiple authors, list them on continuation lines led by =;;= and a tab or at least two spaces. We recommend including a contact email address, of the form '<...>'. For example: =;; Author: Your Name           ;;      Someone Else           ;;      Another Person=

- 'Maintainer'

  This header has the same format as the Author header. It lists the person(s) who currently maintain(s) the file (respond to bug reports, etc.). If there is no maintainer line, the person(s) in the Author field is/are presumed to be the maintainers. Some files in Emacs use 'FSF' for the maintainer. This means that the original author is no longer responsible for the file, and that it is maintained as part of Emacs.

- 'Created'

  This optional line gives the original creation date of the file, and is for historical interest only.

- 'Version'

  If you wish to record version numbers for the individual Lisp program, put them in this line. Lisp files distributed with Emacs generally do not have a 'Version' header, since the version number of Emacs itself serves the same purpose. If you are distributing a collection of multiple files, we recommend not writing the version in every file, but only the main one.

- 'Keywords'

  This line lists keywords for the =finder-by-keyword= help command. Please use that command to see a list of the meaningful keywords. The command M-x checkdoc-package-keywords will find and display any keywords that are not in =finder-known-keywords=. If you set the variable =checkdoc-package-keywords-flag= non-=nil=, checkdoc commands will include the keyword verification in its checks. This field is how people will find your package when they're looking for things by topic. To separate the keywords, you can use spaces, commas, or both. The name of this field is unfortunate, since people often assume it is the place to write arbitrary keywords that describe their package, rather than just the relevant Finder keywords.

- 'Homepage'

- 'URL'

  These lines state the homepage of the library.

- 'Package-Version'

  If 'Version' is not suitable for use by the package manager, then a package can define 'Package-Version'; it will be used instead. This is handy if 'Version' is an RCS id or something else that cannot be parsed by =version-to-list=. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Packaging-Basics][Packaging Basics]].

- 'Package-Requires'

  If this exists, it names packages on which the current package depends for proper operation. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Packaging-Basics][Packaging Basics]]. This is used by the package manager both at download time (to ensure that a complete set of packages is downloaded) and at activation time (to ensure that a package is only activated if all its dependencies have been). Its format is a list of lists on a single line. The =car= of each sub-list is the name of a package, as a symbol. The =cadr= of each sub-list is the minimum acceptable version number, as a string that can be parse by =version-to-list=. An entry that lacks a version (i.e., an entry which is just a symbol, or a sub-list of one element) is equivalent to entry with version "0". For instance: =;; Package-Requires: ((gnus "1.0") (bubbles "2.7.2") cl-lib (seq))= The package code automatically defines a package named 'emacs' with the version number of the currently running Emacs. This can be used to require a minimal version of Emacs for a package.

Just about every Lisp library ought to have the 'Author' and 'Keywords' header comment lines. Use the others if they are appropriate. You can also put in header lines with other header names---they have no standard meanings, so they can't do any harm.

We use additional stylized comments to subdivide the contents of the library file. These should be separated from anything else by blank lines. Here is a table of them:

​

- ';;; Commentary:'

  This begins introductory comments that explain how the library works. It should come right after the copying permissions, terminated by a 'Change Log', 'History' or 'Code' comment line. This text is used by the Finder package, so it should make sense in that context.

- ';;; Change Log:'

  This begins an optional log of changes to the file over time. Don't put too much information in this section---it is better to keep the detailed logs in a version control system (as Emacs does) or in a separate ChangeLog file. 'History' is an alternative to 'Change Log'.

- ';;; Code:'

  This begins the actual code of the program.

- ';;; filename ends here'

  This is the footer line; it appears at the very end of the file. Its purpose is to enable people to detect truncated versions of the file from the lack of a footer line.

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Standard-Errors][Standard Errors]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Tips][Tips]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Top][Top]]

