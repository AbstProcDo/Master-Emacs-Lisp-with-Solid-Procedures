#+TITLE: 31.Marker
* 31 Markers
   :PROPERTIES:
   :CUSTOM_ID: markers
   :END:

A marker is a Lisp object used to specify a position in a buffer relative to the surrounding text. A marker changes its offset from the beginning of the buffer automatically whenever text is inserted or deleted, so that it stays with the two characters on either side of it.

1) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Overview-of-Markers][Overview of Markers]]: The components of a marker, and how it relocates.
2) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Predicates-on-Markers][Predicates on Markers]]: Testing whether an object is a marker.
3) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Creating-Markers][Creating Markers]]: Making empty markers or markers at certain places.
4) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Information-from-Markers][Information from Markers]]: Finding the marker's buffer or character position.
5) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Marker-Insertion-Types][Marker Insertion Types]]: Two ways a marker can relocate when you insert where it points.
6) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Moving-Markers][Moving Markers]]: Moving the marker to a new buffer or position.
7) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#The-Mark][The Mark]]: How the mark is implemented with a marker.
8) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#The-Region][The Region]]: How to access the region.


* 31.1 Overview of Markers
    :PROPERTIES:
    :CUSTOM_ID: overview-of-markers
    :END:

A marker specifies a buffer and a position in that buffer. A marker can be used to represent a position in functions that require one, just as an integer could be used. In that case, the marker's buffer is normally ignored. Of course, a marker used in this way usually points to a position in the buffer that the function operates on, but that is entirely the programmer's responsibility. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Positions][Positions]], for a complete description of positions.

A marker has three attributes: the marker position, the marker buffer, and the insertion type. The marker position is an integer that is equivalent (at a given time) to the marker as a position in that buffer. But the marker's position value can change during the life of the marker, and often does. Insertion and deletion of text in the buffer relocate the marker. The idea is that a marker positioned between two characters remains between those two characters despite insertion and deletion elsewhere in the buffer. Relocation changes the integer equivalent of the marker.

Deleting text around a marker's position leaves the marker between the characters immediately before and after the deleted text. Inserting text at the position of a marker normally leaves the marker either in front of or after the new text, depending on the marker's insertion type (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Marker-Insertion-Types][Marker Insertion Types]])---unless the insertion is done with =insert-before-markers= (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Insertion][Insertion]]).

Insertion and deletion in a buffer must check all the markers and relocate them if necessary. This slows processing in a buffer with a large number of markers. For this reason, it is a good idea to make a marker point nowhere if you are sure you don't need it any more. Markers that can no longer be accessed are eventually removed (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Garbage-Collection][Garbage Collection]]).

Because it is common to perform arithmetic operations on a marker position, most of these operations (including =+= and =-=) accept markers as arguments. In such cases, the marker stands for its current position.

Here are examples of creating markers, setting markers, and moving point to markers:

#+BEGIN_EXAMPLE
         ;; Make a new marker that initially does not point anywhere:
         (setq m1 (make-marker))
              ⇒ #<marker in no buffer>

         ;; Set m1 to point between the 99th and 100th characters
         ;;   in the current buffer:
         (set-marker m1 100)
              ⇒ #<marker at 100 in markers.texi>

         ;; Now insert one character at the beginning of the buffer:
         (goto-char (point-min))
              ⇒ 1
         (insert "Q")
              ⇒ nil

         ;; m1 is updated appropriately.
         m1
              ⇒ #<marker at 101 in markers.texi>

         ;; Two markers that point to the same position
         ;;   are not eq, but they are equal.
         (setq m2 (copy-marker m1))
              ⇒ #<marker at 101 in markers.texi>
         (eq m1 m2)
              ⇒ nil
         (equal m1 m2)
              ⇒ t

         ;; When you are finished using a marker, make it point nowhere.
         (set-marker m1 nil)
              ⇒ #<marker in no buffer>
#+END_EXAMPLE

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Creating-Markers][Creating Markers]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Overview-of-Markers][Overview of Markers]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Markers][Markers]]

* 31.2 Predicates on Markers
    :PROPERTIES:
    :CUSTOM_ID: predicates-on-markers
    :END:

You can test an object to see whether it is a marker, or whether it is either an integer or a marker. The latter test is useful in connection with the arithmetic functions that work with both markers and integers.

--- Function: *markerp* object

#+BEGIN_QUOTE
  This function returns =t= if object is a marker, =nil= otherwise. Note that integers are not markers, even though many functions will accept either a marker or an integer.
#+END_QUOTE

--- Function: *integer-or-marker-p* object

#+BEGIN_QUOTE
  This function returns =t= if object is an integer or a marker, =nil= otherwise.
#+END_QUOTE

--- Function: *number-or-marker-p* object

#+BEGIN_QUOTE
  This function returns =t= if object is a number (either integer or floating point) or a marker, =nil= otherwise.
#+END_QUOTE

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Information-from-Markers][Information from Markers]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Predicates-on-Markers][Predicates on Markers]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Markers][Markers]]

* 31.3 Functions that Create Markers
    :PROPERTIES:
    :CUSTOM_ID: functions-that-create-markers
    :END:

When you create a new marker, you can make it point nowhere, or point to the present position of point, or to the beginning or end of the accessible portion of the buffer, or to the same place as another given marker.

The next four functions all return markers with insertion type =nil=. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Marker-Insertion-Types][Marker Insertion Types]].

--- Function: *make-marker*

#+BEGIN_QUOTE
  This function returns a newly created marker that does not point anywhere.

  #+BEGIN_EXAMPLE
                (make-marker)
                     ⇒ #<marker in no buffer>
  #+END_EXAMPLE
#+END_QUOTE

--- Function: *point-marker*

#+BEGIN_QUOTE
  This function returns a new marker that points to the present position of point in the current buffer. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Point][Point]]. For an example, see =copy-marker=, below.
#+END_QUOTE

--- Function: *point-min-marker*

#+BEGIN_QUOTE
  This function returns a new marker that points to the beginning of the accessible portion of the buffer. This will be the beginning of the buffer unless narrowing is in effect. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Narrowing][Narrowing]].
#+END_QUOTE

--- Function: *point-max-marker*

#+BEGIN_QUOTE
  This function returns a new marker that points to the end of the accessible portion of the buffer. This will be the end of the buffer unless narrowing is in effect. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Narrowing][Narrowing]].

  Here are examples of this function and =point-min-marker=, shown in a buffer containing a version of the source file for the text of this chapter.

  #+BEGIN_EXAMPLE
                (point-min-marker)
                     ⇒ #<marker at 1 in markers.texi>
                (point-max-marker)
                     ⇒ #<marker at 24080 in markers.texi>

                (narrow-to-region 100 200)
                     ⇒ nil
                (point-min-marker)
                     ⇒ #<marker at 100 in markers.texi>
                (point-max-marker)
                     ⇒ #<marker at 200 in markers.texi>
  #+END_EXAMPLE
#+END_QUOTE

--- Function: *copy-marker* &optional marker-or-integer insertion-type

#+BEGIN_QUOTE
  If passed a marker as its argument, =copy-marker= returns a new marker that points to the same place and the same buffer as does marker-or-integer. If passed an integer as its argument, =copy-marker= returns a new marker that points to position marker-or-integer in the current buffer.

  The new marker's insertion type is specified by the argument insertion-type. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Marker-Insertion-Types][Marker Insertion Types]].

  #+BEGIN_EXAMPLE
                (copy-marker 0)
                     ⇒ #<marker at 1 in markers.texi>

                (copy-marker 90000)
                     ⇒ #<marker at 24080 in markers.texi>
  #+END_EXAMPLE

  An error is signaled if marker is neither a marker nor an integer.
#+END_QUOTE

Two distinct markers are considered =equal= (even though not =eq=) to each other if they have the same position and buffer, or if they both point nowhere.

#+BEGIN_EXAMPLE
         (setq p (point-marker))
              ⇒ #<marker at 2139 in markers.texi>

         (setq q (copy-marker p))
              ⇒ #<marker at 2139 in markers.texi>

         (eq p q)
              ⇒ nil

         (equal p q)
              ⇒ t
#+END_EXAMPLE

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Marker-Insertion-Types][Marker Insertion Types]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Creating-Markers][Creating Markers]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Markers][Markers]]

* 31.4 Information from Markers
    :PROPERTIES:
    :CUSTOM_ID: information-from-markers
    :END:

This section describes the functions for accessing the components of a marker object.

--- Function: *marker-position* marker

#+BEGIN_QUOTE
  This function returns the position that marker points to, or =nil= if it points nowhere.
#+END_QUOTE

--- Function: *marker-buffer* marker

#+BEGIN_QUOTE
  This function returns the buffer that marker points into, or =nil= if it points nowhere.

  #+BEGIN_EXAMPLE
                (setq m (make-marker))
                     ⇒ #<marker in no buffer>
                (marker-position m)
                     ⇒ nil
                (marker-buffer m)
                     ⇒ nil

                (set-marker m 3770 (current-buffer))
                     ⇒ #<marker at 3770 in markers.texi>
                (marker-buffer m)
                     ⇒ #<buffer markers.texi>
                (marker-position m)
                     ⇒ 3770
  #+END_EXAMPLE
#+END_QUOTE

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Moving-Markers][Moving Markers]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Information-from-Markers][Information from Markers]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Markers][Markers]]

* 31.5 Marker Insertion Types
    :PROPERTIES:
    :CUSTOM_ID: marker-insertion-types
    :END:

When you insert text directly at the place where a marker points, there are two possible ways to relocate that marker: it can point before the inserted text, or point after it. You can specify which one a given marker should do by setting its insertion type. Note that use of =insert-before-markers= ignores markers' insertion types, always relocating a marker to point after the inserted text.

--- Function: *set-marker-insertion-type* marker type

#+BEGIN_QUOTE
  This function sets the insertion type of marker marker to type. If type is =t=, marker will advance when text is inserted at its position. If type is =nil=, marker does not advance when text is inserted there.
#+END_QUOTE

--- Function: *marker-insertion-type* marker

#+BEGIN_QUOTE
  This function reports the current insertion type of marker.
#+END_QUOTE

All functions that create markers without accepting an argument that specifies the insertion type, create them with insertion type =nil= (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Creating-Markers][Creating Markers]]). Also, the mark has, by default, insertion type =nil=.

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#The-Mark][The Mark]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Marker-Insertion-Types][Marker Insertion Types]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Markers][Markers]]

* 31.6 Moving Marker Positions
    :PROPERTIES:
    :CUSTOM_ID: moving-marker-positions
    :END:

This section describes how to change the position of an existing marker. When you do this, be sure you know whether the marker is used outside of your program, and, if so, what effects will result from moving it---otherwise, confusing things may happen in other parts of Emacs.

--- Function: *set-marker* marker position &optional buffer

#+BEGIN_QUOTE
  This function moves marker to position in buffer. If buffer is not provided, it defaults to the current buffer.

  If position is =nil= or a marker that points nowhere, then marker is set to point nowhere.

  The value returned is marker.

  #+BEGIN_EXAMPLE
                (setq m (point-marker))
                     ⇒ #<marker at 4714 in markers.texi>
                (set-marker m 55)
                     ⇒ #<marker at 55 in markers.texi>
                (setq b (get-buffer "foo"))
                     ⇒ #<buffer foo>
                (set-marker m 0 b)
                     ⇒ #<marker at 1 in foo>
  #+END_EXAMPLE
#+END_QUOTE

--- Function: *move-marker* marker position &optional buffer

#+BEGIN_QUOTE
  This is another name for =set-marker=.
#+END_QUOTE

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#The-Region][The Region]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Moving-Markers][Moving Markers]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Markers][Markers]]

* 31.7 The Mark
    :PROPERTIES:
    :CUSTOM_ID: the-mark
    :END:

Each buffer has a special marker, which is designated the mark. When a buffer is newly created, this marker exists but does not point anywhere; this means that the mark doesn't exist in that buffer yet. Subsequent commands can set the mark.

The mark specifies a position to bound a range of text for many commands, such as =kill-region= and =indent-rigidly=. These commands typically act on the text between point and the mark, which is called the region. If you are writing a command that operates on the region, don't examine the mark directly; instead, use =interactive= with the 'r' specification. This provides the values of point and the mark as arguments to the command in an interactive call, but permits other Lisp programs to specify arguments explicitly. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Interactive-Codes][Interactive Codes]].

Some commands set the mark as a side-effect. Commands should do this only if it has a potential use to the user, and never for their own internal purposes. For example, the =replace-regexp= command sets the mark to the value of point before doing any replacements, because this enables the user to move back there conveniently after the replace is finished.

Once the mark exists in a buffer, it normally never ceases to exist. However, it may become inactive, if Transient Mark mode is enabled. The buffer-local variable =mark-active=, if non-=nil=, means that the mark is active. A command can call the function =deactivate-mark= to deactivate the mark directly, or it can request deactivation of the mark upon return to the editor command loop by setting the variable =deactivate-mark= to a non-=nil= value.

If Transient Mark mode is enabled, certain editing commands that normally apply to text near point, apply instead to the region when the mark is active. This is the main motivation for using Transient Mark mode. (Another is that this enables highlighting of the region when the mark is active. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Display][Display]].)

In addition to the mark, each buffer has a mark ring which is a list of markers containing previous values of the mark. When editing commands change the mark, they should normally save the old value of the mark on the mark ring. The variable =mark-ring-max= specifies the maximum number of entries in the mark ring; once the list becomes this long, adding a new element deletes the last element.

There is also a separate global mark ring, but that is used only in a few particular user-level commands, and is not relevant to Lisp programming. So we do not describe it here.

--- Function: *mark* &optional force

#+BEGIN_QUOTE
  This function returns the current buffer's mark position as an integer, or =nil= if no mark has ever been set in this buffer.

  If Transient Mark mode is enabled, and =mark-even-if-inactive= is =nil=, =mark= signals an error if the mark is inactive. However, if force is non-=nil=, then =mark= disregards inactivity of the mark, and returns the mark position (or =nil=) anyway.
#+END_QUOTE

--- Function: *mark-marker*

#+BEGIN_QUOTE
  This function returns the marker that represents the current buffer's mark. It is not a copy, it is the marker used internally. Therefore, changing this marker's position will directly affect the buffer's mark. Don't do that unless that is the effect you want.

  #+BEGIN_EXAMPLE
                (setq m (mark-marker))
                     ⇒ #<marker at 3420 in markers.texi>
                (set-marker m 100)
                     ⇒ #<marker at 100 in markers.texi>
                (mark-marker)
                     ⇒ #<marker at 100 in markers.texi>
  #+END_EXAMPLE

  Like any marker, this marker can be set to point at any buffer you like. If you make it point at any buffer other than the one of which it is the mark, it will yield perfectly consistent, but rather odd, results. We recommend that you not do it!
#+END_QUOTE

--- Function: *set-mark* position

#+BEGIN_QUOTE
  This function sets the mark to position, and activates the mark. The old value of the mark is /not/ pushed onto the mark ring.

  *Please note:* Use this function only if you want the user to see that the mark has moved, and you want the previous mark position to be lost. Normally, when a new mark is set, the old one should go on the =mark-ring=. For this reason, most applications should use =push-mark= and =pop-mark=, not =set-mark=.

  Novice Emacs Lisp programmers often try to use the mark for the wrong purposes. The mark saves a location for the user's convenience. An editing command should not alter the mark unless altering the mark is part of the user-level functionality of the command. (And, in that case, this effect should be documented.) To remember a location for internal use in the Lisp program, store it in a Lisp variable. For example:

  #+BEGIN_EXAMPLE
                (let ((beg (point)))
                  (forward-line 1)
                  (delete-region beg (point))).
  #+END_EXAMPLE
#+END_QUOTE

--- Function: *push-mark* &optional position nomsg activate

#+BEGIN_QUOTE
  This function sets the current buffer's mark to position, and pushes a copy of the previous mark onto =mark-ring=. If position is =nil=, then the value of point is used.

  The function =push-mark= normally /does not/ activate the mark. To do that, specify =t= for the argument activate.

  A 'Mark set' message is displayed unless nomsg is non-=nil=.
#+END_QUOTE

--- Function: *pop-mark*

#+BEGIN_QUOTE
  This function pops off the top element of =mark-ring= and makes that mark become the buffer's actual mark. This does not move point in the buffer, and it does nothing if =mark-ring= is empty. It deactivates the mark.
#+END_QUOTE

--- User Option: *transient-mark-mode*

#+BEGIN_QUOTE
  This variable, if non-=nil=, enables Transient Mark mode. In Transient Mark mode, every buffer-modifying primitive sets =deactivate-mark=. As a consequence, most commands that modify the buffer also deactivate the mark.

  When Transient Mark mode is enabled and the mark is active, many commands that normally apply to the text near point instead apply to the region. Such commands should use the function =use-region-p= to test whether they should operate on the region. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#The-Region][The Region]].

  Lisp programs can set =transient-mark-mode= to non-=nil=, non-=t= values to enable Transient Mark mode temporarily. If the value is =lambda=, Transient Mark mode is automatically turned off after any action, such as buffer modification, that would normally deactivate the mark. If the value is =(only .=oldval=)=, then =transient-mark-mode= is set to the value oldval after any subsequent command that moves point and is not shift-translated (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Key-Sequence-Input][shift-translation]]), or after any other action that would normally deactivate the mark.
#+END_QUOTE

--- User Option: *mark-even-if-inactive*

#+BEGIN_QUOTE
  If this is non-=nil=, Lisp programs and the Emacs user can use the mark even when it is inactive. This option affects the behavior of Transient Mark mode. When the option is non-=nil=, deactivation of the mark turns off region highlighting, but commands that use the mark behave as if the mark were still active.
#+END_QUOTE

--- Variable: *deactivate-mark*

#+BEGIN_QUOTE
  If an editor command sets this variable non-=nil=, then the editor command loop deactivates the mark after the command returns (if Transient Mark mode is enabled). All the primitives that change the buffer set =deactivate-mark=, to deactivate the mark when the command is finished. Setting this variable makes it buffer-local.

  To write Lisp code that modifies the buffer without causing deactivation of the mark at the end of the command, bind =deactivate-mark= to =nil= around the code that does the modification. For example:

  #+BEGIN_EXAMPLE
                (let (deactivate-mark)
                  (insert " "))
  #+END_EXAMPLE
#+END_QUOTE

--- Function: *deactivate-mark* &optional force

#+BEGIN_QUOTE
  If Transient Mark mode is enabled or force is non-=nil=, this function deactivates the mark and runs the normal hook =deactivate-mark-hook=. Otherwise, it does nothing.
#+END_QUOTE

--- Variable: *mark-active*

#+BEGIN_QUOTE
  The mark is active when this variable is non-=nil=. This variable is always buffer-local in each buffer. Do /not/ use the value of this variable to decide whether a command that normally operates on text near point should operate on the region instead. Use the function =use-region-p= for that (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#The-Region][The Region]]).
#+END_QUOTE

--- Variable: *activate-mark-hook* --- Variable: *deactivate-mark-hook*

#+BEGIN_QUOTE
  These normal hooks are run, respectively, when the mark becomes active and when it becomes inactive. The hook =activate-mark-hook= is also run at the end of the command loop if the mark is active and it is possible that the region may have changed.
#+END_QUOTE

--- Function: *handle-shift-selection*

#+BEGIN_QUOTE
  This function implements the shift-selection behavior of point-motion commands. See [[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Shift-Selection][Shift Selection]]. It is called automatically by the Emacs command loop whenever a command with a '\^' character in its =interactive= spec is invoked, before the command itself is executed (see [\^](https://www.gnu.org/software/emacs/manual/html\_mono/elisp.html#Interactive-Codes)).

  If =shift-select-mode= is non-=nil= and the current command was invoked via shift translation (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Key-Sequence-Input][shift-translation]]), this function sets the mark and temporarily activates the region, unless the region was already temporarily activated in this way. Otherwise, if the region has been activated temporarily, it deactivates the mark and restores the variable =transient-mark-mode= to its earlier value.
#+END_QUOTE

--- Variable: *mark-ring*

#+BEGIN_QUOTE
  The value of this buffer-local variable is the list of saved former marks of the current buffer, most recent first.

  #+BEGIN_EXAMPLE
                mark-ring
                ⇒ (#<marker at 11050 in markers.texi>
                    #<marker at 10832 in markers.texi>
                    ...)
  #+END_EXAMPLE
#+END_QUOTE

--- User Option: *mark-ring-max*

#+BEGIN_QUOTE
  The value of this variable is the maximum size of =mark-ring=. If more marks than this are pushed onto the =mark-ring=, =push-mark= discards an old mark when it adds a new one.
#+END_QUOTE

When Delete Selection mode (see [[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Using-Region][Delete Selection]]) is enabled, commands that operate on the active region (a.k.a. "selection") behave slightly differently. This works by adding the function =delete-selection-pre-hook= to the =pre-command-hook= (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Command-Overview][Command Overview]]). That function calls =delete-selection-helper= to delete the selection as appropriate for the command. If you want to adapt a command to Delete Selection mode, put the =delete-selection= property on the function's symbol (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Symbol-Plists][Symbol Plists]]); commands that don't have this property on their symbol won't delete the selection. This property can have one of several values to tailor the behavior to what the command is supposed to do; see the doc strings of =delete-selection-pre-hook= and =delete-selection-helper= for the details.

Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#The-Mark][The Mark]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Markers][Markers]]

* 31.8 The Region
    :PROPERTIES:
    :CUSTOM_ID: the-region
    :END:

The text between point and the mark is known as the region. Various functions operate on text delimited by point and the mark, but only those functions specifically related to the region itself are described here.

The next two functions signal an error if the mark does not point anywhere. If Transient Mark mode is enabled and =mark-even-if-inactive= is =nil=, they also signal an error if the mark is inactive.

--- Function: *region-beginning*

#+BEGIN_QUOTE
  This function returns the position of the beginning of the region (as an integer). This is the position of either point or the mark, whichever is smaller.
#+END_QUOTE

--- Function: *region-end*

#+BEGIN_QUOTE
  This function returns the position of the end of the region (as an integer). This is the position of either point or the mark, whichever is larger.
#+END_QUOTE

Instead of using =region-beginning= and =region-end=, a command designed to operate on a region should normally use =interactive= with the 'r' specification to find the beginning and end of the region. This lets other Lisp programs specify the bounds explicitly as arguments. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Interactive-Codes][Interactive Codes]].

--- Function: *use-region-p*

#+BEGIN_QUOTE
  This function returns =t= if Transient Mark mode is enabled, the mark is active, and there is a valid region in the buffer. This function is intended to be used by commands that operate on the region, instead of on text near point, when the mark is active.

  A region is valid if it has a non-zero size, or if the user option =use-empty-active-region= is non-=nil= (by default, it is =nil=). The function =region-active-p= is similar to =use-region-p=, but considers all regions as valid. In most cases, you should not use =region-active-p=, since if the region is empty it is often more appropriate to operate on point.
#+END_QUOTE

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Non_002dASCII-Characters][Non-ASCII Characters]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Markers][Markers]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Top][Top]]

