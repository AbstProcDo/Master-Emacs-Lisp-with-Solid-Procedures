#+TITLE: 24.Documentation
* 24 Documentation
   :PROPERTIES:
   :CUSTOM_ID: documentation
   :END:

GNU Emacs has convenient built-in help facilities, most of which derive their information from documentation strings associated with functions and variables. This chapter describes how to access documentation strings in Lisp programs.

The contents of a documentation string should follow certain conventions. In particular, its first line should be a complete sentence (or two complete sentences) that briefly describes what the function or variable does. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Documentation-Tips][Documentation Tips]], for how to write good documentation strings.

Note that the documentation strings for Emacs are not the same thing as the Emacs manual. Manuals have their own source files, written in the Texinfo language; documentation strings are specified in the definitions of the functions and variables they apply to. A collection of documentation strings is not sufficient as a manual because a good manual is not organized in that fashion; it is organized in terms of topics of discussion.

For commands to display documentation strings, see [[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Help][Help]].

1) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Documentation-Basics][Documentation Basics]]: Where doc strings are defined and stored.
2) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Accessing-Documentation][Accessing Documentation]]: How Lisp programs can access doc strings.
3) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Keys-in-Documentation][Keys in Documentation]]: Substituting current key bindings.
4) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Text-Quoting-Style][Text Quoting Style]]: Quotation marks in doc strings and messages.
5) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Describing-Characters][Describing Characters]]: Making printable descriptions of non-printing characters and key sequences.
6) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Help-Functions][Help Functions]]: Subroutines used by Emacs help facilities.

* 24.1 Documentation Basics
    :PROPERTIES:
    :CUSTOM_ID: documentation-basics
    :END:

A documentation string is written using the Lisp syntax for strings, with double-quote characters surrounding the text. It is, in fact, an actual Lisp string. When the string appears in the proper place in a function or variable definition, it serves as the function's or variable's documentation.

In a function definition (a =lambda= or =defun= form), the documentation string is specified after the argument list, and is normally stored directly in the function object. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Function-Documentation][Function Documentation]]. You can also put function documentation in the =function-documentation= property of a function name (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Accessing-Documentation][Accessing Documentation]]).

In a variable definition (a =defvar= form), the documentation string is specified after the initial value. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Defining-Variables][Defining Variables]]. The string is stored in the variable's =variable-documentation= property.

Sometimes, Emacs does not keep documentation strings in memory. There are two such circumstances. Firstly, to save memory, the documentation for preloaded functions and variables (including primitives) is kept in a file named DOC, in the directory specified by =doc-directory= (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Accessing-Documentation][Accessing Documentation]]). Secondly, when a function or variable is loaded from a byte-compiled file, Emacs avoids loading its documentation string (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Docs-and-Compilation][Docs and Compilation]]). In both cases, Emacs looks up the documentation string from the file only when needed, such as when the user calls C-h f (=describe-function=) for a function.

Documentation strings can contain special key substitution sequences, referring to key bindings which are looked up only when the user views the documentation. This allows the help commands to display the correct keys even if a user rearranges the default key bindings. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Keys-in-Documentation][Keys in Documentation]].

In the documentation string of an autoloaded command (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Autoload][Autoload]]), these key-substitution sequences have an additional special effect: they cause C-h f on the command to trigger autoloading. (This is needed for correctly setting up the hyperlinks in the /Help/ buffer.)

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Keys-in-Documentation][Keys in Documentation]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Documentation-Basics][Documentation Basics]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Documentation][Documentation]]

* 24.2 Access to Documentation Strings
    :PROPERTIES:
    :CUSTOM_ID: access-to-documentation-strings
    :END:

--- Function: *documentation-property* symbol property &optional verbatim

#+BEGIN_QUOTE
  This function returns the documentation string recorded in symbol's property list under property property. It is most often used to look up the documentation strings of variables, for which property is =variable-documentation=. However, it can also be used to look up other kinds of documentation, such as for customization groups (but for function documentation, use the =documentation= function, below).

  If the property value refers to a documentation string stored in the DOC file or a byte-compiled file, this function looks up that string and returns it.

  If the property value isn't =nil=, isn't a string, and doesn't refer to text in a file, then it is evaluated as a Lisp expression to obtain a string.

  Finally, this function passes the string through =substitute-command-keys= to substitute key bindings (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Keys-in-Documentation][Keys in Documentation]]). It skips this step if verbatim is non-=nil=.

  #+BEGIN_EXAMPLE
                (documentation-property 'command-line-processed
                   'variable-documentation)
                     ⇒ "Non-nil once command line has been processed"
                (symbol-plist 'command-line-processed)
                     ⇒ (variable-documentation 188902)
                (documentation-property 'emacs 'group-documentation)
                     ⇒ "Customization of the One True Editor."
  #+END_EXAMPLE
#+END_QUOTE

--- Function: *documentation* function &optional verbatim

#+BEGIN_QUOTE
  This function returns the documentation string of function. It handles macros, named keyboard macros, and special forms, as well as ordinary functions.

  If function is a symbol, this function first looks for the =function-documentation= property of that symbol; if that has a non-=nil= value, the documentation comes from that value (if the value is not a string, it is evaluated).

  If function is not a symbol, or if it has no =function-documentation= property, then =documentation= extracts the documentation string from the actual function definition, reading it from a file if called for.

  Finally, unless verbatim is non-=nil=, this function calls =substitute-command-keys=. The result is the documentation string to return.

  The =documentation= function signals a =void-function= error if function has no function definition. However, it is OK if the function definition has no documentation string. In that case, =documentation= returns =nil=.
#+END_QUOTE

--- Function: *face-documentation* face

#+BEGIN_QUOTE
  This function returns the documentation string of face as a face.
#+END_QUOTE

Here is an example of using the two functions, =documentation= and =documentation-property=, to display the documentation strings for several symbols in a /Help/ buffer.

#+BEGIN_EXAMPLE
         (defun describe-symbols (pattern)
           "Describe the Emacs Lisp symbols matching PATTERN.
         All symbols that have PATTERN in their name are described
         in the *Help* buffer."
           (interactive "sDescribe symbols matching: ")
           (let ((describe-func
                  (function
                   (lambda (s)
                     ;; Print description of symbol.
                     (if (fboundp s)             ; It is a function.
                         (princ
                          (format "%s\t%s\n%s\n\n" s
                            (if (commandp s)
                                (let ((keys (where-is-internal s)))
                                  (if keys
                                      (concat
                                       "Keys: "
                                       (mapconcat 'key-description
                                                  keys " "))
                                    "Keys: none"))
                              "Function")
                            (or (documentation s)
                                "not documented"))))

                     (if (boundp s)              ; It is a variable.
                         (princ
                          (format "%s\t%s\n%s\n\n" s
                            (if (custom-variable-p s)
                                "Option " "Variable")
                            (or (documentation-property
                                  s 'variable-documentation)
                                "not documented")))))))
                 sym-list)

             ;; Build a list of symbols that match pattern.
             (mapatoms (function
                        (lambda (sym)
                          (if (string-match pattern (symbol-name sym))
                              (setq sym-list (cons sym sym-list))))))

             ;; Display the data.
             (help-setup-xref (list 'describe-symbols pattern) (interactive-p))
             (with-help-window (help-buffer)
               (mapcar describe-func (sort sym-list 'string<)))))
#+END_EXAMPLE

The =describe-symbols= function works like =apropos=, but provides more information.

#+BEGIN_EXAMPLE
         (describe-symbols "goal")

         ---------- Buffer: *Help* ----------
         goal-column     Option
         Semipermanent goal column for vertical motion, as set by ...



         minibuffer-temporary-goal-position      Variable
         not documented

         set-goal-column Keys: C-x C-n
         Set the current horizontal position as a goal for C-n and C-p.

         Those commands will move to this position in the line moved to
         rather than trying to keep the same horizontal position.
         With a non-nil argument ARG, clears out the goal column
         so that C-n and C-p resume vertical motion.
         The goal column is stored in the variable ‘goal-column’.

         (fn ARG)

         temporary-goal-column   Variable
         Current goal column for vertical motion.
         It is the column where point was at the start of the current run
         of vertical motion commands.

         When moving by visual lines via the function ‘line-move-visual’, it is a cons
         cell (COL . HSCROLL), where COL is the x-position, in pixels,
         divided by the default column width, and HSCROLL is the number of
         columns by which window is scrolled from left margin.

         When the ‘track-eol’ feature is doing its job, the value is
         ‘most-positive-fixnum’.
         ---------- Buffer: *Help* ----------
#+END_EXAMPLE

--- Function: *Snarf-documentation* filename

#+BEGIN_QUOTE
  This function is used when building Emacs, just before the runnable Emacs is dumped. It finds the positions of the documentation strings stored in the file filename, and records those positions into memory in the function definitions and variable property lists. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Building-Emacs][Building Emacs]].

  Emacs reads the file filename from the emacs/etc directory. When the dumped Emacs is later executed, the same file will be looked for in the directory =doc-directory=. Usually filename is ="DOC"=.
#+END_QUOTE

--- Variable: *doc-directory*

#+BEGIN_QUOTE
  This variable holds the name of the directory which should contain the file ="DOC"= that contains documentation strings for built-in and preloaded functions and variables.

  In most cases, this is the same as =data-directory=. They may be different when you run Emacs from the directory where you built it, without actually installing it. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Definition-of-data_002ddirectory][Definition of data-directory]].
#+END_QUOTE

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Text-Quoting-Style][Text Quoting Style]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Accessing-Documentation][Accessing Documentation]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Documentation][Documentation]]

* 24.3 Substituting Key Bindings in Documentation
    :PROPERTIES:
    :CUSTOM_ID: substituting-key-bindings-in-documentation
    :END:

When documentation strings refer to key sequences, they should use the current, actual key bindings. They can do so using certain special text sequences described below. Accessing documentation strings in the usual way substitutes current key binding information for these special sequences. This works by calling =substitute-command-keys=. You can also call that function yourself.

Here is a list of the special sequences and what they mean:

- =\[=command=]=

  stands for a key sequence that will invoke command, or 'M-x command' if command has no key bindings.

- =\{=mapvar=}=

  stands for a summary of the keymap which is the value of the variable mapvar. The summary is made using =describe-bindings=.

- =\<=mapvar=>=

  stands for no text itself. It is used only for a side effect: it specifies mapvar's value as the keymap for any following '[command]' sequences in this documentation string.

- ```

  (grave accent) stands for a left quote. This generates a left single quotation mark, an apostrophe, or a grave accent depending on the value of =text-quoting-style=. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Text-Quoting-Style][Text Quoting Style]].

- ='=

  (apostrophe) stands for a right quote. This generates a right single quotation mark or an apostrophe depending on the value of =text-quoting-style=.

- =\==

  quotes the following character and is discarded; thus, '==’ puts ‘=' into the output, '=[' puts '[' into the output, and '==' puts '=' into the output.

*Please note:* Each ‘' must be doubled when written in a string in Emacs Lisp.

--- User Option: *text-quoting-style*

#+BEGIN_QUOTE
  The value of this variable is a symbol that specifies the style Emacs should use for single quotes in the wording of help and messages. If the variable's value is =curve=, the style is =‘like this’= with curved single quotes. If the value is =straight=, the style is ='like this'= with straight apostrophes. If the value is =grave=, quotes are not translated and the style is `=like this'= with grave accent and apostrophe, the standard style before Emacs version 25. The default value =nil= acts like =curve= if curved single quotes seem to be displayable, and like =grave= otherwise.

  This option is useful on platforms that have problems with curved quotes. You can customize it freely according to your personal preference.
#+END_QUOTE

--- Function: *substitute-command-keys* string

#+BEGIN_QUOTE
  This function scans string for the above special sequences and replaces them by what they stand for, returning the result as a string. This permits display of documentation that refers accurately to the user's own customized key bindings.

  If a command has multiple bindings, this function normally uses the first one it finds. You can specify one particular key binding by assigning an =:advertised-binding= symbol property to the command, like this:

  #+BEGIN_EXAMPLE
                (put 'undo :advertised-binding [?\C-/])
  #+END_EXAMPLE

  The =:advertised-binding= property also affects the binding shown in menu items (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Menu-Bar][Menu Bar]]). The property is ignored if it specifies a key binding that the command does not actually have.
#+END_QUOTE

Here are examples of the special sequences:

#+BEGIN_EXAMPLE
         (substitute-command-keys
            "To abort recursive edit, type `\\[abort-recursive-edit]'.")
         ⇒ "To abort recursive edit, type ‘C-]’."

         (substitute-command-keys
            "The keys that are defined for the minibuffer here are:
           \\{minibuffer-local-must-match-map}")
         ⇒ "The keys that are defined for the minibuffer here are:

         ?               minibuffer-completion-help
         SPC             minibuffer-complete-word
         TAB             minibuffer-complete
         C-j             minibuffer-complete-and-exit
         RET             minibuffer-complete-and-exit
         C-g             abort-recursive-edit
         "

         (substitute-command-keys
            "To abort a recursive edit from the minibuffer, type \
         `\\<minibuffer-local-must-match-map>\\[abort-recursive-edit]'.")
         ⇒ "To abort a recursive edit from the minibuffer, type ‘C-g’."
#+END_EXAMPLE

There are other special conventions for the text in documentation strings---for instance, you can refer to functions, variables, and sections of this manual. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Documentation-Tips][Documentation Tips]], for details.

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Describing-Characters][Describing Characters]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Keys-in-Documentation][Keys in Documentation]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Documentation][Documentation]]

* 24.4 Text Quoting Style
    :PROPERTIES:
    :CUSTOM_ID: text-quoting-style
    :END:

Typically, grave accents and apostrophes are treated specially in documentation strings and diagnostic messages, and translate to matching single quotation marks (also called "curved quotes"). For example, the documentation string ="Alias for=foo'."=and the function call=(message"Alias for =foo'.")= both translate to ="Alias for ‘foo’."=. Less commonly, Emacs displays grave accents and apostrophes as themselves, or as apostrophes only (e.g., ="Alias for 'foo'."=). Documentation strings and message formats should be written so that they display well with any of these styles. For example, the documentation string ="Alias for 'foo'."= is probably not what you want, as it can display as ="Alias for ’foo’."=, an unusual style in English.

Sometimes you may need to display a grave accent or apostrophe without translation, regardless of text quoting style. In a documentation string, you can do this with escapes. For example, in the documentation string ="\\==(a ,(sin 0)) ==> (a 0.0)"=the grave accent is intended to denote Lisp code, so it is escaped and displays as itself regardless of quoting style.  In a call to=message=or=error=, you can avoid translation by using a format="%s"=with an argument that is a call to=format=.  For example,=(message"%s" (format "=(a ,(sin %S)) ==> (a %S)" x (sin x)))= displays a message that starts with grave accent regardless of text quoting style.

--- User Option: *text-quoting-style*

#+BEGIN_QUOTE
  The value of this user option is a symbol that specifies the style Emacs should use for single quotes in the wording of help and messages. If the option's value is =curve=, the style is =‘like this’= with curved single quotes. If the value is =straight=, the style is ='like this'= with straight apostrophes. If the value is =grave=, quotes are not translated and the style is `=like this'= with grave accent and apostrophe, the standard style before Emacs version 25. The default value =nil= acts like =curve= if curved single quotes seem to be displayable, and like =grave= otherwise.

  This option is useful on platforms that have problems with curved quotes. You can customize it freely according to your personal preference.
#+END_QUOTE

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Help-Functions][Help Functions]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Text-Quoting-Style][Text Quoting Style]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Documentation][Documentation]]

* 24.5 Describing Characters for Help Messages
    :PROPERTIES:
    :CUSTOM_ID: describing-characters-for-help-messages
    :END:

These functions convert events, key sequences, or characters to textual descriptions. These descriptions are useful for including arbitrary text characters or key sequences in messages, because they convert non-printing and whitespace characters to sequences of printing characters. The description of a non-whitespace printing character is the character itself.

--- Function: *key-description* sequence &optional prefix

#+BEGIN_QUOTE
  This function returns a string containing the Emacs standard notation for the input events in sequence. If prefix is non-=nil=, it is a sequence of input events leading up to sequence and is included in the return value. Both arguments may be strings, vectors or lists. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Input-Events][Input Events]], for more information about valid events.

  #+BEGIN_EXAMPLE
                (key-description [?\M-3 delete])
                     ⇒ "M-3 <delete>"
                (key-description [delete] "\M-3")
                     ⇒ "M-3 <delete>"
  #+END_EXAMPLE

  See also the examples for =single-key-description=, below.
#+END_QUOTE

--- Function: *single-key-description* event &optional no-angles

#+BEGIN_QUOTE
  This function returns a string describing event in the standard Emacs notation for keyboard input. A normal printing character appears as itself, but a control character turns into a string starting with 'C-', a meta character turns into a string starting with 'M-', and space, tab, etc., appear as 'SPC', 'TAB', etc. A function key symbol appears inside angle brackets '<...>'. An event that is a list appears as the name of the symbol in the car of the list, inside angle brackets.

  If the optional argument no-angles is non-=nil=, the angle brackets around function keys and event symbols are omitted; this is for compatibility with old versions of Emacs which didn't use the brackets.

  #+BEGIN_EXAMPLE
                (single-key-description ?\C-x)
                     ⇒ "C-x"
                (key-description "\C-x \M-y \n \t \r \f123")
                     ⇒ "C-x SPC M-y SPC C-j SPC TAB SPC RET SPC C-l 1 2 3"
                (single-key-description 'delete)
                     ⇒ "<delete>"
                (single-key-description 'C-mouse-1)
                     ⇒ "<C-mouse-1>"
                (single-key-description 'C-mouse-1 t)
                     ⇒ "C-mouse-1"
  #+END_EXAMPLE
#+END_QUOTE

--- Function: *text-char-description* character

#+BEGIN_QUOTE
  This function returns a string describing character in the standard Emacs notation for characters that can appear in text---similar to =single-key-description=, except that the argument must be a valid character code that passes a =characterp= test (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Character-Codes][Character Codes]]). The function produces descriptions of control characters with a leading caret (which is how Emacs usually displays control characters in buffers). Characters with modifier bits will cause this function to signal an error (ASCII characters with the Control modifier are an exception, they are represented as control characters).

  #+BEGIN_EXAMPLE
                (text-char-description ?\C-c)
                     ⇒ "^C"
                (text-char-description ?\M-m)
                     error--> Wrong type argument: characterp, 134217837
  #+END_EXAMPLE
#+END_QUOTE

--- Command: *read-kbd-macro* string &optional need-vector

#+BEGIN_QUOTE
  This function is used mainly for operating on keyboard macros, but it can also be used as a rough inverse for =key-description=. You call it with a string containing key descriptions, separated by spaces; it returns a string or vector containing the corresponding events. (This may or may not be a single valid key sequence, depending on what events you use; see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Key-Sequences][Key Sequences]].) If need-vector is non-=nil=, the return value is always a vector.
#+END_QUOTE

Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Describing-Characters][Describing Characters]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Documentation][Documentation]]

* 24.6 Help Functions
    :PROPERTIES:
    :CUSTOM_ID: help-functions
    :END:

Emacs provides a variety of built-in help functions, all accessible to the user as subcommands of the prefix C-h. For more information about them, see [[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Help][Help]]. Here we describe some program-level interfaces to the same information.

--- Command: *apropos* pattern &optional do-all

#+BEGIN_QUOTE
  This function finds all meaningful symbols whose names contain a match for the apropos pattern pattern. An apropos pattern is either a word to match, a space-separated list of words of which at least two must match, or a regular expression (if any special regular expression characters occur). A symbol is meaningful if it has a definition as a function, variable, or face, or has properties.

  The function returns a list of elements that look like this:

  #+BEGIN_EXAMPLE
                (symbol score function-doc variable-doc
                 plist-doc widget-doc face-doc group-doc)
  #+END_EXAMPLE

  Here, score is an integer measure of how important the symbol seems to be as a match. Each of the remaining elements is a documentation string, or =nil=, for symbol as a function, variable, etc.

  It also displays the symbols in a buffer named /Apropos/, each with a one-line description taken from the beginning of its documentation string.

  If do-all is non-=nil=, or if the user option =apropos-do-all= is non-=nil=, then =apropos= also shows key bindings for the functions that are found; it also shows /all/ interned symbols, not just meaningful ones (and it lists them in the return value as well).
#+END_QUOTE

--- Variable: *help-map*

#+BEGIN_QUOTE
  The value of this variable is a local keymap for characters following the Help key, C-h.
#+END_QUOTE

--- Prefix Command: *help-command*

#+BEGIN_QUOTE
  This symbol is not a function; its function definition cell holds the keymap known as =help-map=. It is defined in help.el as follows:

  #+BEGIN_EXAMPLE
                (define-key global-map (string help-char) 'help-command)
                (fset 'help-command help-map)
  #+END_EXAMPLE
#+END_QUOTE

--- User Option: *help-char*

#+BEGIN_QUOTE
  The value of this variable is the help character---the character that Emacs recognizes as meaning Help. By default, its value is 8, which stands for C-h. When Emacs reads this character, if =help-form= is a non-=nil= Lisp expression, it evaluates that expression, and displays the result in a window if it is a string.

  Usually the value of =help-form= is =nil=. Then the help character has no special meaning at the level of command input, and it becomes part of a key sequence in the normal way. The standard key binding of C-h is a prefix key for several general-purpose help features.

  The help character is special after prefix keys, too. If it has no binding as a subcommand of the prefix key, it runs =describe-prefix-bindings=, which displays a list of all the subcommands of the prefix key.
#+END_QUOTE

--- User Option: *help-event-list*

#+BEGIN_QUOTE
  The value of this variable is a list of event types that serve as alternative help characters. These events are handled just like the event specified by =help-char=.
#+END_QUOTE

--- Variable: *help-form*

#+BEGIN_QUOTE
  If this variable is non-=nil=, its value is a form to evaluate whenever the character =help-char= is read. If evaluating the form produces a string, that string is displayed.

  A command that calls =read-event=, =read-char-choice=, or =read-char= probably should bind =help-form= to a non-=nil= expression while it does input. (The time when you should not do this is when C-h has some other meaning.) Evaluating this expression should result in a string that explains what the input is for and how to enter it properly.

  Entry to the minibuffer binds this variable to the value of =minibuffer-help-form= (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Definition-of-minibuffer_002dhelp_002dform][Definition of minibuffer-help-form]]).
#+END_QUOTE

--- Variable: *prefix-help-command*

#+BEGIN_QUOTE
  This variable holds a function to print help for a prefix key. The function is called when the user types a prefix key followed by the help character, and the help character has no binding after that prefix. The variable's default value is =describe-prefix-bindings=.
#+END_QUOTE

--- Command: *describe-prefix-bindings*

#+BEGIN_QUOTE
  This function calls =describe-bindings= to display a list of all the subcommands of the prefix key of the most recent key sequence. The prefix described consists of all but the last event of that key sequence. (The last event is, presumably, the help character.)
#+END_QUOTE

The following two functions are meant for modes that want to provide help without relinquishing control, such as the electric modes. Their names begin with 'Helper' to distinguish them from the ordinary help functions.

--- Command: *Helper-describe-bindings*

#+BEGIN_QUOTE
  This command pops up a window displaying a help buffer containing a listing of all of the key bindings from both the local and global keymaps. It works by calling =describe-bindings=.
#+END_QUOTE

--- Command: *Helper-help*

#+BEGIN_QUOTE
  This command provides help for the current mode. It prompts the user in the minibuffer with the message 'Help (Type ? for further options)', and then provides assistance in finding out what the key bindings are, and what the mode is intended for. It returns =nil=.

  This can be customized by changing the map =Helper-help-map=.
#+END_QUOTE

--- Variable: *data-directory*

#+BEGIN_QUOTE
  This variable holds the name of the directory in which Emacs finds certain documentation and text files that come with Emacs.
#+END_QUOTE

--- Function: *help-buffer*

#+BEGIN_QUOTE
  This function returns the name of the help buffer, which is normally /Help/; if such a buffer does not exist, it is first created.
#+END_QUOTE

--- Macro: *with-help-window* buffer-or-name body...

#+BEGIN_QUOTE
  This macro evaluates body like =with-output-to-temp-buffer= (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Temporary-Displays][Temporary Displays]]), inserting any output produced by its forms into a buffer specified by buffer-or-name, which can be a buffer or the name of a buffer. (Frequently, buffer-or-name is the value returned by the function =help-buffer=.) This macro puts the specified buffer into Help mode and displays a message telling the user how to quit and scroll the help window. It selects the help window if the current value of the user option =help-window-select= has been set accordingly. It returns the last value in body.
#+END_QUOTE

--- Function: *help-setup-xref* item interactive-p

#+BEGIN_QUOTE
  This function updates the cross reference data in the /Help/ buffer, which is used to regenerate the help information when the user clicks on the 'Back' or 'Forward' buttons. Most commands that use the /Help/ buffer should invoke this function before clearing the buffer. The item argument should have the form =(=function=.=args=)=, where function is a function to call, with argument list args, to regenerate the help buffer. The interactive-p argument is non-=nil= if the calling command was invoked interactively; in that case, the stack of items for the /Help/ buffer's 'Back' buttons is cleared.
#+END_QUOTE

See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#describe_002dsymbols-example][describe-symbols example]], for an example of using =help-buffer=, =with-help-window=, and =help-setup-xref=.

--- Macro: *make-help-screen* fname help-line help-text help-map

#+BEGIN_QUOTE
  This macro defines a help command named fname that acts like a prefix key that shows a list of the subcommands it offers.

  When invoked, fname displays help-text in a window, then reads and executes a key sequence according to help-map. The string help-text should describe the bindings available in help-map.

  The command fname is defined to handle a few events itself, by scrolling the display of help-text. When fname reads one of those special events, it does the scrolling and then reads another event. When it reads an event that is not one of those few, and which has a binding in help-map, it executes that key's binding and then returns.

  The argument help-line should be a single-line summary of the alternatives in help-map. In the current version of Emacs, this argument is used only if you set the option =three-step-help= to =t=.

  This macro is used in the command =help-for-help= which is the binding of C-h C-h.
#+END_QUOTE

--- User Option: *three-step-help*

#+BEGIN_QUOTE
  If this variable is non-=nil=, commands defined with =make-help-screen= display their help-line strings in the echo area at first, and display the longer help-text strings only if the user types the help character again.
#+END_QUOTE
