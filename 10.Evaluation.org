#+TITLE: 10.Evaluation
* 10 Evaluation
   :PROPERTIES:
   :CUSTOM_ID: evaluation
   :END:

The evaluation of expressions in Emacs Lisp is performed by the Lisp interpreter---a program that receives a Lisp object as input and computes its value as an expression. How it does this depends on the data type of the object, according to rules described in this chapter. The interpreter runs automatically to evaluate portions of your program, but can also be called explicitly via the Lisp primitive function =eval=.

1) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Intro-Eval][Intro Eval]]: Evaluation in the scheme of things.
2) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Forms][Forms]]: How various sorts of objects are evaluated.
3) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Quoting][Quoting]]: Avoiding evaluation (to put constants in the program).
4) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Backquote][Backquote]]: Easier construction of list structure.
5) [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Eval][Eval]]: How to invoke the Lisp interpreter explicitly.



* 10.1 Introduction to Evaluation
    :PROPERTIES:
    :CUSTOM_ID: introduction-to-evaluation
    :END:

The Lisp interpreter, or evaluator, is the part of Emacs that computes the value of an expression that is given to it. When a function written in Lisp is called, the evaluator computes the value of the function by evaluating the expressions in the function body. Thus, running any Lisp program really means running the Lisp interpreter.

A Lisp object that is intended for evaluation is called a form or expression[[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#fn-5][5]]. The fact that forms are data objects and not merely text is one of the fundamental differences between Lisp-like languages and typical programming languages. Any object can be evaluated, but in practice only numbers, symbols, lists and strings are evaluated very often.

In subsequent sections, we will describe the details of what evaluation means for each kind of form.

It is very common to read a Lisp form and then evaluate the form, but reading and evaluation are separate activities, and either can be performed alone. Reading per se does not evaluate anything; it converts the printed representation of a Lisp object to the object itself. It is up to the caller of =read= to specify whether this object is a form to be evaluated, or serves some entirely different purpose. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Input-Functions][Input Functions]].

Evaluation is a recursive process, and evaluating a form often involves evaluating parts within that form. For instance, when you evaluate a function call form such as =(car x)=, Emacs first evaluates the argument (the subform =x=). After evaluating the argument, Emacs executes the function (=car=), and if the function is written in Lisp, execution works by evaluating the body of the function (in this example, however, =car= is not a Lisp function; it is a primitive function implemented in C). See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Functions][Functions]], for more information about functions and function calls.

Evaluation takes place in a context called the environment, which consists of the current values and bindings of all Lisp variables (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Variables][Variables]]).[[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#fn-6][6]] Whenever a form refers to a variable without creating a new binding for it, the variable evaluates to the value given by the current environment. Evaluating a form may also temporarily alter the environment by binding variables (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Local-Variables][Local Variables]]).

Evaluating a form may also make changes that persist; these changes are called side effects. An example of a form that produces a side effect is =(setq foo 1)=.

Do not confuse evaluation with command key interpretation. The editor command loop translates keyboard input into a command (an interactively callable function) using the active keymaps, and then uses =call-interactively= to execute that command. Executing the command usually involves evaluation, if the command is written in Lisp; however, this step is not considered a part of command key interpretation. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Command-Loop][Command Loop]].



* 10.2 Kinds of Forms
    :PROPERTIES:
    :CUSTOM_ID: kinds-of-forms
    :END:

A Lisp object that is intended to be evaluated is called a form (or an expression). How Emacs evaluates a form depends on its data type. Emacs has three different kinds of form that are evaluated differently: symbols, lists, and all other types. This section describes all three kinds, one by one, starting with the other types, which are self-evaluating forms.

- [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Self_002dEvaluating-Forms][Self-Evaluating Forms]]: Forms that evaluate to themselves.
- [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Symbol-Forms][Symbol Forms]]: Symbols evaluate as variables.
- [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Classifying-Lists][Classifying Lists]]: How to distinguish various sorts of list forms.
- [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Function-Indirection][Function Indirection]]: When a symbol appears as the car of a list, we find the real function via the symbol.
- [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Function-Forms][Function Forms]]: Forms that call functions.
- [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Macro-Forms][Macro Forms]]: Forms that call macros.
- [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Special-Forms][Special Forms]]: Special forms are idiosyncratic primitives, most of them extremely important.
- [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Autoloading][Autoloading]]: Functions set up to load files containing their real definitions.

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Symbol-Forms][Symbol Forms]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Forms][Forms]]

** 10.2.1 Self-Evaluating Forms
     :PROPERTIES:
     :CUSTOM_ID: self-evaluating-forms
     :END:

A self-evaluating form is any form that is not a list or symbol. Self-evaluating forms evaluate to themselves: the result of evaluation is the same object that was evaluated. Thus, the number 25 evaluates to 25, and the string ="foo"= evaluates to the string ="foo"=. Likewise, evaluating a vector does not cause evaluation of the elements of the vector---it returns the same vector with its contents unchanged.

#+BEGIN_EXAMPLE
         '123               ; A number, shown without evaluation.
              ⇒ 123
         123                ; Evaluated as usual---result is the same.
              ⇒ 123
         (eval '123)        ; Evaluated "by hand"---result is the same.
              ⇒ 123
         (eval (eval '123)) ; Evaluating twice changes nothing.
              ⇒ 123
#+END_EXAMPLE

It is common to write numbers, characters, strings, and even vectors in Lisp code, taking advantage of the fact that they self-evaluate. However, it is quite unusual to do this for types that lack a read syntax, because there's no way to write them textually. It is possible to construct Lisp expressions containing these types by means of a Lisp program. Here is an example:

#+BEGIN_EXAMPLE
         ;; Build an expression containing a buffer object.
         (setq print-exp (list 'print (current-buffer)))
              ⇒ (print #<buffer eval.texi>)
         ;; Evaluate it.
         (eval print-exp)
              -| #<buffer eval.texi>
              ⇒ #<buffer eval.texi>
#+END_EXAMPLE

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Classifying-Lists][Classifying Lists]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Self_002dEvaluating-Forms][Self-Evaluating Forms]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Forms][Forms]]

** 10.2.2 Symbol Forms
     :PROPERTIES:
     :CUSTOM_ID: symbol-forms
     :END:

When a symbol is evaluated, it is treated as a variable. The result is the variable's value, if it has one. If the symbol has no value as a variable, the Lisp interpreter signals an error. For more information on the use of variables, see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Variables][Variables]].

In the following example, we set the value of a symbol with =setq=. Then we evaluate the symbol, and get back the value that =setq= stored.

#+BEGIN_EXAMPLE
         (setq a 123)
              ⇒ 123
         (eval 'a)
              ⇒ 123
         a
              ⇒ 123
#+END_EXAMPLE

The symbols =nil= and =t= are treated specially, so that the value of =nil= is always =nil=, and the value of =t= is always =t=; you cannot set or bind them to any other values. Thus, these two symbols act like self-evaluating forms, even though =eval= treats them like any other symbol. A symbol whose name starts with ':' also self-evaluates in the same way; likewise, its value ordinarily cannot be changed. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Constant-Variables][Constant Variables]].

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Function-Indirection][Function Indirection]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Symbol-Forms][Symbol Forms]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Forms][Forms]]

** 10.2.3 Classification of List Forms
     :PROPERTIES:
     :CUSTOM_ID: classification-of-list-forms
     :END:

A form that is a nonempty list is either a function call, a macro call, or a special form, according to its first element. These three kinds of forms are evaluated in different ways, described below. The remaining list elements constitute the arguments for the function, macro, or special form.

The first step in evaluating a nonempty list is to examine its first element. This element alone determines what kind of form the list is and how the rest of the list is to be processed. The first element is /not/ evaluated, as it would be in some Lisp dialects such as Scheme.

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Function-Forms][Function Forms]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Classifying-Lists][Classifying Lists]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Forms][Forms]]

** 10.2.4 Symbol Function Indirection
     :PROPERTIES:
     :CUSTOM_ID: symbol-function-indirection
     :END:

If the first element of the list is a symbol then evaluation examines the symbol's function cell, and uses its contents instead of the original symbol. If the contents are another symbol, this process, called symbol function indirection, is repeated until it obtains a non-symbol. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Function-Names][Function Names]], for more information about symbol function indirection.

One possible consequence of this process is an infinite loop, in the event that a symbol's function cell refers to the same symbol. Otherwise, we eventually obtain a non-symbol, which ought to be a function or other suitable object.

More precisely, we should now have a Lisp function (a lambda expression), a byte-code function, a primitive function, a Lisp macro, a special form, or an autoload object. Each of these types is a case described in one of the following sections. If the object is not one of these types, Emacs signals an =invalid-function= error.

The following example illustrates the symbol indirection process. We use =fset= to set the function cell of a symbol and =symbol-function= to get the function cell contents (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Function-Cells][Function Cells]]). Specifically, we store the symbol =car= into the function cell of =first=, and the symbol =first= into the function cell of =erste=.

#+BEGIN_EXAMPLE
         ;; Build this function cell linkage:
         ;;   -------------       -----        -------        -------
         ;;  | #<subr car> | <-- | car |  <-- | first |  <-- | erste |
         ;;   -------------       -----        -------        -------
         (symbol-function 'car)
              ⇒ #<subr car>
         (fset 'first 'car)
              ⇒ car
         (fset 'erste 'first)
              ⇒ first
         (erste '(1 2 3))   ; Call the function referenced by erste.
              ⇒ 1
#+END_EXAMPLE

By contrast, the following example calls a function without any symbol function indirection, because the first element is an anonymous Lisp function, not a symbol.

#+BEGIN_EXAMPLE
         ((lambda (arg) (erste arg))
          '(1 2 3))
              ⇒ 1
#+END_EXAMPLE

Executing the function itself evaluates its body; this does involve symbol function indirection when calling =erste=.

This form is rarely used and is now deprecated. Instead, you should write it as:

#+BEGIN_EXAMPLE
         (funcall (lambda (arg) (erste arg))
                  '(1 2 3))
#+END_EXAMPLE

or just

#+BEGIN_EXAMPLE
         (let ((arg '(1 2 3))) (erste arg))
#+END_EXAMPLE

The built-in function =indirect-function= provides an easy way to perform symbol function indirection explicitly.

--- Function: *indirect-function* function &optional noerror

#+BEGIN_QUOTE
  This function returns the meaning of function as a function. If function is a symbol, then it finds function's function definition and starts over with that value. If function is not a symbol, then it returns function itself.

  This function returns =nil= if the final symbol is unbound. It signals a =cyclic-function-indirection= error if there is a loop in the chain of symbols.

  The optional argument noerror is obsolete, kept for backward compatibility, and has no effect.

  Here is how you could define =indirect-function= in Lisp:

  #+BEGIN_EXAMPLE
                (defun indirect-function (function)
                  (if (symbolp function)
                      (indirect-function (symbol-function function))
                    function))
  #+END_EXAMPLE
#+END_QUOTE

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Macro-Forms][Macro Forms]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Function-Indirection][Function Indirection]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Forms][Forms]]

** 10.2.5 Evaluation of Function Forms
     :PROPERTIES:
     :CUSTOM_ID: evaluation-of-function-forms
     :END:

If the first element of a list being evaluated is a Lisp function object, byte-code object or primitive function object, then that list is a function call. For example, here is a call to the function =+=:

#+BEGIN_EXAMPLE
         (+ 1 x)
#+END_EXAMPLE

The first step in evaluating a function call is to evaluate the remaining elements of the list from left to right. The results are the actual argument values, one value for each list element. The next step is to call the function with this list of arguments, effectively using the function =apply= (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Calling-Functions][Calling Functions]]). If the function is written in Lisp, the arguments are used to bind the argument variables of the function (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Lambda-Expressions][Lambda Expressions]]); then the forms in the function body are evaluated in order, and the value of the last body form becomes the value of the function call.

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Special-Forms][Special Forms]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Function-Forms][Function Forms]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Forms][Forms]]

** 10.2.6 Lisp Macro Evaluation
     :PROPERTIES:
     :CUSTOM_ID: lisp-macro-evaluation
     :END:

If the first element of a list being evaluated is a macro object, then the list is a macro call. When a macro call is evaluated, the elements of the rest of the list are /not/ initially evaluated. Instead, these elements themselves are used as the arguments of the macro. The macro definition computes a replacement form, called the expansion of the macro, to be evaluated in place of the original form. The expansion may be any sort of form: a self-evaluating constant, a symbol, or a list. If the expansion is itself a macro call, this process of expansion repeats until some other sort of form results.

Ordinary evaluation of a macro call finishes by evaluating the expansion. However, the macro expansion is not necessarily evaluated right away, or at all, because other programs also expand macro calls, and they may or may not evaluate the expansions.

Normally, the argument expressions are not evaluated as part of computing the macro expansion, but instead appear as part of the expansion, so they are computed when the expansion is evaluated.

For example, given a macro defined as follows:

#+BEGIN_EXAMPLE
         (defmacro cadr (x)
           (list 'car (list 'cdr x)))
#+END_EXAMPLE

an expression such as =(cadr (assq 'handler list))= is a macro call, and its expansion is:

#+BEGIN_EXAMPLE
         (car (cdr (assq 'handler list)))
#+END_EXAMPLE

Note that the argument =(assq 'handler list)= appears in the expansion.

See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Macros][Macros]], for a complete description of Emacs Lisp macros.

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Autoloading][Autoloading]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Macro-Forms][Macro Forms]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Forms][Forms]]

** 10.2.7 Special Forms
     :PROPERTIES:
     :CUSTOM_ID: special-forms
     :END:

A special form is a primitive function specially marked so that its arguments are not all evaluated. Most special forms define control structures or perform variable bindings---things which functions cannot do.

Each special form has its own rules for which arguments are evaluated and which are used without evaluation. Whether a particular argument is evaluated may depend on the results of evaluating other arguments.

If an expression's first symbol is that of a special form, the expression should follow the rules of that special form; otherwise, Emacs's behavior is not well-defined (though it will not crash). For example, =((lambda (x) x . 3) 4)= contains a subexpression that begins with =lambda= but is not a well-formed =lambda= expression, so Emacs may signal an error, or may return 3 or 4 or =nil=, or may behave in other ways.

--- Function: *special-form-p* object

#+BEGIN_QUOTE
  This predicate tests whether its argument is a special form, and returns =t= if so, =nil= otherwise.
#+END_QUOTE

Here is a list, in alphabetical order, of all of the special forms in Emacs Lisp with a reference to where each is described.

- =and=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Combining-Conditions][Combining Conditions]]

- =catch=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Catch-and-Throw][Catch and Throw]]

- =cond=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Conditionals][Conditionals]]

- =condition-case=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Handling-Errors][Handling Errors]]

- =defconst=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Defining-Variables][Defining Variables]]

- =defvar=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Defining-Variables][Defining Variables]]

- =function=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Anonymous-Functions][Anonymous Functions]]

- =if=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Conditionals][Conditionals]]

- =interactive=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Interactive-Call][Interactive Call]]

- =lambda=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Lambda-Expressions][Lambda Expressions]]

- =let=

- =let*=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Local-Variables][Local Variables]]

- =or=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Combining-Conditions][Combining Conditions]]

- =prog1=

- =prog2=

- =progn=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Sequencing][Sequencing]]

- =quote=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Quoting][Quoting]]

- =save-current-buffer=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Current-Buffer][Current Buffer]]

- =save-excursion=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Excursions][Excursions]]

- =save-restriction=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Narrowing][Narrowing]]

- =setq=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Setting-Variables][Setting Variables]]

- =setq-default=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Creating-Buffer_002dLocal][Creating Buffer-Local]]

- =unwind-protect=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Nonlocal-Exits][Nonlocal Exits]]

- =while=

  see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Iteration][Iteration]]

#+BEGIN_QUOTE
  *Common Lisp note:* Here are some comparisons of special forms in GNU Emacs Lisp and Common Lisp. =setq=, =if=, and =catch= are special forms in both Emacs Lisp and Common Lisp. =save-excursion= is a special form in Emacs Lisp, but doesn't exist in Common Lisp. =throw= is a special form in Common Lisp (because it must be able to throw multiple values), but it is a function in Emacs Lisp (which doesn't have multiple values).
#+END_QUOTE

Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Special-Forms][Special Forms]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Forms][Forms]]

** 10.2.8 Autoloading
     :PROPERTIES:
     :CUSTOM_ID: autoloading
     :END:

The autoload feature allows you to call a function or macro whose function definition has not yet been loaded into Emacs. It specifies which file contains the definition. When an autoload object appears as a symbol's function definition, calling that symbol as a function automatically loads the specified file; then it calls the real definition loaded from that file. The way to arrange for an autoload object to appear as a symbol's function definition is described in [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Autoload][Autoload]].

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Backquote][Backquote]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Forms][Forms]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Evaluation][Evaluation]]

* 10.3 Quoting
    :PROPERTIES:
    :CUSTOM_ID: quoting
    :END:

The special form =quote= returns its single argument, as written, without evaluating it. This provides a way to include constant symbols and lists, which are not self-evaluating objects, in a program. (It is not necessary to quote self-evaluating objects such as numbers, strings, and vectors.)

--- Special Form: *quote* object

#+BEGIN_QUOTE
  This special form returns object, without evaluating it.
#+END_QUOTE

Because =quote= is used so often in programs, Lisp provides a convenient read syntax for it. An apostrophe character (‘'') followed by a Lisp object (in read syntax) expands to a list whose first element is =quote=, and whose second element is the object. Thus, the read syntax ='x= is an abbreviation for =(quote x)=.

Here are some examples of expressions that use =quote=:

#+BEGIN_EXAMPLE
         (quote (+ 1 2))
              ⇒ (+ 1 2)
         (quote foo)
              ⇒ foo
         'foo
              ⇒ foo
         ''foo
              ⇒ (quote foo)
         '(quote foo)
              ⇒ (quote foo)
         ['foo]
              ⇒ [(quote foo)]
#+END_EXAMPLE

Other quoting constructs include =function= (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Anonymous-Functions][Anonymous Functions]]), which causes an anonymous lambda expression written in Lisp to be compiled, and '`' (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Backquote][Backquote]]), which is used to quote only part of a list, while computing and substituting other parts.

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Eval][Eval]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Quoting][Quoting]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Evaluation][Evaluation]]

* 10.4 Backquote
    :PROPERTIES:
    :CUSTOM_ID: backquote
    :END:

Backquote constructs allow you to quote a list, but selectively evaluate elements of that list. In the simplest case, it is identical to the special form =quote= (described in the previous section; see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Quoting][Quoting]]). For example, these two forms yield identical results:

#+BEGIN_EXAMPLE
         `(a list of (+ 2 3) elements)
              ⇒ (a list of (+ 2 3) elements)
         '(a list of (+ 2 3) elements)
              ⇒ (a list of (+ 2 3) elements)
#+END_EXAMPLE

The special marker ',' inside of the argument to backquote indicates a value that isn't constant. The Emacs Lisp evaluator evaluates the argument of ',', and puts the value in the list structure:

#+BEGIN_EXAMPLE
         `(a list of ,(+ 2 3) elements)
              ⇒ (a list of 5 elements)
#+END_EXAMPLE

Substitution with ',' is allowed at deeper levels of the list structure also. For example:

#+BEGIN_EXAMPLE
         `(1 2 (3 ,(+ 4 5)))
              ⇒ (1 2 (3 9))
#+END_EXAMPLE

You can also splice an evaluated value into the resulting list, using the special marker ',@'. The elements of the spliced list become elements at the same level as the other elements of the resulting list. The equivalent code without using '`' is often unreadable. Here are some examples:

#+BEGIN_EXAMPLE
         (setq some-list '(2 3))
              ⇒ (2 3)
         (cons 1 (append some-list '(4) some-list))
              ⇒ (1 2 3 4 2 3)
         `(1 ,@some-list 4 ,@some-list)
              ⇒ (1 2 3 4 2 3)

         (setq list '(hack foo bar))
              ⇒ (hack foo bar)
         (cons 'use
           (cons 'the
             (cons 'words (append (cdr list) '(as elements)))))
              ⇒ (use the words foo bar as elements)
         `(use the words ,@(cdr list) as elements)
              ⇒ (use the words foo bar as elements)
#+END_EXAMPLE

Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Backquote][Backquote]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Evaluation][Evaluation]]

* 10.5 Eval
    :PROPERTIES:
    :CUSTOM_ID: eval
    :END:

Most often, forms are evaluated automatically, by virtue of their occurrence in a program being run. On rare occasions, you may need to write code that evaluates a form that is computed at run time, such as after reading a form from text being edited or getting one from a property list. On these occasions, use the =eval= function. Often =eval= is not needed and something else should be used instead. For example, to get the value of a variable, while =eval= works, =symbol-value= is preferable; or rather than store expressions in a property list that then need to go through =eval=, it is better to store functions instead that are then passed to =funcall=.

The functions and variables described in this section evaluate forms, specify limits to the evaluation process, or record recently returned values. Loading a file also does evaluation (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Loading][Loading]]).

It is generally cleaner and more flexible to store a function in a data structure, and call it with =funcall= or =apply=, than to store an expression in the data structure and evaluate it. Using functions provides the ability to pass information to them as arguments.

--- Function: *eval* form &optional lexical

#+BEGIN_QUOTE
  This is the basic function for evaluating an expression. It evaluates form in the current environment, and returns the result. The type of the form object determines how it is evaluated. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Forms][Forms]].

  The argument lexical specifies the scoping rule for local variables (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Variable-Scoping][Variable Scoping]]). If it is omitted or =nil=, that means to evaluate form using the default dynamic scoping rule. If it is =t=, that means to use the lexical scoping rule. The value of lexical can also be a non-empty alist specifying a particular lexical environment for lexical bindings; however, this feature is only useful for specialized purposes, such as in Emacs Lisp debuggers. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Lexical-Binding][Lexical Binding]].

  Since =eval= is a function, the argument expression that appears in a call to =eval= is evaluated twice: once as preparation before =eval= is called, and again by the =eval= function itself. Here is an example:

  #+BEGIN_EXAMPLE
                (setq foo 'bar)
                     ⇒ bar
                (setq bar 'baz)
                     ⇒ baz
                ;; Here eval receives argument foo
                (eval 'foo)
                     ⇒ bar
                ;; Here eval receives argument bar, which is the value of foo
                (eval foo)
                     ⇒ baz
  #+END_EXAMPLE

  The number of currently active calls to =eval= is limited to =max-lisp-eval-depth= (see below).
#+END_QUOTE

--- Command: *eval-region* start end &optional stream read-function

#+BEGIN_QUOTE
  This function evaluates the forms in the current buffer in the region defined by the positions start and end. It reads forms from the region and calls =eval= on them until the end of the region is reached, or until an error is signaled and not handled.

  By default, =eval-region= does not produce any output. However, if stream is non-=nil=, any output produced by output functions (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Output-Functions][Output Functions]]), as well as the values that result from evaluating the expressions in the region are printed using stream. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Output-Streams][Output Streams]].

  If read-function is non-=nil=, it should be a function, which is used instead of =read= to read expressions one by one. This function is called with one argument, the stream for reading input. You can also use the variable =load-read-function= (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Definition-of-load_002dread_002dfunction][How Programs Do Loading]]) to specify this function, but it is more robust to use the read-function argument.

  =eval-region= does not move point. It always returns =nil=.
#+END_QUOTE

--- Command: *eval-buffer* &optional buffer-or-name stream filename unibyte print

#+BEGIN_QUOTE
  This is similar to =eval-region=, but the arguments provide different optional features. =eval-buffer= operates on the entire accessible portion of buffer buffer-or-name (see [[https://www.gnu.org/software/emacs/manual/html_mono/emacs.html#Narrowing][Narrowing]]). buffer-or-name can be a buffer, a buffer name (a string), or =nil= (or omitted), which means to use the current buffer. stream is used as in =eval-region=, unless stream is =nil= and print non-=nil=. In that case, values that result from evaluating the expressions are still discarded, but the output of the output functions is printed in the echo area. filename is the file name to use for =load-history= (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Unloading][Unloading]]), and defaults to =buffer-file-name= (see [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Buffer-File-Name][Buffer File Name]]). If unibyte is non-=nil=, =read= converts strings to unibyte whenever possible.

  =eval-current-buffer= is an alias for this command.
#+END_QUOTE

--- User Option: *max-lisp-eval-depth*

#+BEGIN_QUOTE
  This variable defines the maximum depth allowed in calls to =eval=, =apply=, and =funcall= before an error is signaled (with error message ="Lisp nesting exceeds max-lisp-eval-depth"=).

  This limit, with the associated error when it is exceeded, is one way Emacs Lisp avoids infinite recursion on an ill-defined function. If you increase the value of =max-lisp-eval-depth= too much, such code can cause stack overflow instead. On some systems, this overflow can be handled. In that case, normal Lisp evaluation is interrupted and control is transferred back to the top level command loop (=top-level=). Note that there is no way to enter Emacs Lisp debugger in this situation. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Error-Debugging][Error Debugging]].

  The depth limit counts internal uses of =eval=, =apply=, and =funcall=, such as for calling the functions mentioned in Lisp expressions, and recursive evaluation of function call arguments and function body forms, as well as explicit calls in Lisp code.

  The default value of this variable is 800. If you set it to a value less than 100, Lisp will reset it to 100 if the given value is reached. Entry to the Lisp debugger increases the value, if there is little room left, to make sure the debugger itself has room to execute.

  =max-specpdl-size= provides another limit on nesting. See [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Definition-of-max_002dspecpdl_002dsize][Local Variables]].
#+END_QUOTE

--- Variable: *values*

#+BEGIN_QUOTE
  The value of this variable is a list of the values returned by all the expressions that were read, evaluated, and printed from buffers (including the minibuffer) by the standard Emacs commands which do this. (Note that this does /not/ include evaluation in /ielm/ buffers, nor evaluation using C-j, C-x C-e, and similar evaluation commands in =lisp-interaction-mode=.) The elements are ordered most recent first.

  #+BEGIN_EXAMPLE
                (setq x 1)
                     ⇒ 1
                (list 'A (1+ 2) auto-save-default)
                     ⇒ (A 3 t)
                values
                     ⇒ ((A 3 t) 1 ...)
  #+END_EXAMPLE

  This variable is useful for referring back to values of forms recently evaluated. It is generally a bad idea to print the value of =values= itself, since this may be very long. Instead, examine particular elements, like this:

  #+BEGIN_EXAMPLE
                ;; Refer to the most recent evaluation result.
                (nth 0 values)
                     ⇒ (A 3 t)
                ;; That put a new element on,
                ;;   so all elements move back one.
                (nth 1 values)
                     ⇒ (A 3 t)
                ;; This gets the element that was next-to-most-recent
                ;;   before this example.
                (nth 3 values)
                     ⇒ 1
  #+END_EXAMPLE
#+END_QUOTE

Next: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Variables][Variables]], Previous: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Evaluation][Evaluation]], Up: [[https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Top][Top]]

